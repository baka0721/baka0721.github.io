<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>别情无处说，方寸是星河</title>
  
  <subtitle>你所热爱的，就是你的生活</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-26T09:56:45.930Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>刘柏东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-06-24T06:00:32.338Z</published>
    <updated>2023-09-26T09:56:45.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="02-Python导言须知-软件使用"><a href="#02-Python导言须知-软件使用" class="headerlink" title="02. Python导言须知.软件使用"></a>02. Python导言须知.软件使用</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-导言须知"><a href="#1-导言须知" class="headerlink" title="1. 导言须知"></a>1. 导言须知</h3><ul><li><p><strong>课程方向：</strong></p><ul><li><p>知识点主要面向小学<strong>5年级+</strong>的少儿编程Python课程，适用于各类<strong>竞赛</strong>；</p></li><li><p>课程比较适合理工科父母的<strong>亲子互动</strong>，教培机构老师<strong>备课参考</strong>；</p></li></ul></li></ul><ul><li><p><strong>课程规划：</strong></p><ul><li>1.基础篇：输入输出函数、变量及数据类型、条件判断、循环、函数、字符串、列表元祖字典、常用库；</li><li><strong>x.数学篇：独立课程，采用OJ系统刷题教学；</strong></li><li>2.绘图篇：Turtle海龟绘图库，基础教学在系统课程里；</li><li><strong>y.绘图扩展篇：Turtle海龟绘图库的提高扩展部分，面向竞赛的独立课程；</strong></li><li>以上部分，止步于小学5年级+，OJ刷题如需要更高年级或能力则会特别说明；</li><li>以下部分，将大于小学5年级+，或需要更高能力者；</li><li>3.面向对象篇：OOP的设计思维以及类的多种方式；</li><li>4.Tkinter篇：GUI可视化模块，软件开发初步；</li><li>5.Pygame篇：入门级游戏库，游戏开发初步；</li><li><strong>z.项目篇：独立课程，每个项目一个课程，常用软件和游戏开发课程；</strong></li></ul></li></ul><p>​          特别说明：竞赛中理论部分会有大量<strong>本课程无法涉及</strong>的部分：比如进制问题（二进制、八进制等）、数据结构和算法部分（二叉树、排序、链表等）以及初等数学、离散、图论等<strong>均没有</strong>。</p><p>​    </p><h3 id="2-软件使用"><a href="#2-软件使用" class="headerlink" title="2. 软件使用"></a>2. 软件使用</h3><p>​    <strong>官网网站：<a href="https://codewith.mu/">https://codewith.mu/</a></strong><br>​    <strong>安装方式：</strong>默认安装即可，但无法更改路径，所以一般在C:\Users\Administrator目录下，如果路径是中文，可能会出现无法打开的问题。需要自行搜索解决，或进入管理员模式下重新安装。</p><p><img src="Python文档.assets/image-20230628104437744.png" alt="image-20230628104437744" style="zoom:80%;margin:0 0 0 20px;" /></p><p>​    <strong>注意：以下内容比较超纲，但都是小概率才会出现，如果不幸出现，请一定要排除万难去解决问题。</strong></p><p>​    解决方案1：按照这个英文这个提示，去查询，有视频、文章去专门解决Qt platform plugin启动的问题。但我不推荐，而且比较难；</p><p>​    解决方案2：卸载掉后，进入win10 管理员帐户下（Administrator），直接安装即可。怎么进入管理员帐户，直接搜索即可。在管理员帐户安装好后，切换到自己的帐户还找不到安装程序，直接去管理员目录下复制到桌面一个快捷方式即可。</p><h3 id="3-print-输出函数"><a href="#3-print-输出函数" class="headerlink" title="3. print()输出函数"></a>3. print()输出函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向控制台输出一行字：Hello, Python</span></span><br><span class="line"><span class="comment"># 注意1：括号和引号(单双均可)必须是英文状态下的</span></span><br><span class="line"><span class="comment"># 注意2：#号开头表示注释，它的作用是解释，并不会执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="03-神奇的存储罐-变量"><a href="#03-神奇的存储罐-变量" class="headerlink" title="03. 神奇的存储罐.变量"></a>03. 神奇的存储罐.变量</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-变量的声明"><a href="#1-变量的声明" class="headerlink" title="1. 变量的声明"></a>1. 变量的声明</h3><ul><li>什么是变量？变量就是一个可以存储东西的存储罐，具体特性如下：<ul><li>每次存储罐里只能存一次东西，也就是说再次存储时，上一次存储的东西会被<strong>替换</strong>掉；</li><li>声明变量就好比你拿出了一个存储罐，实际上是在内存里开辟了一个空间；</li><li>不管是现实中的存储罐还是内存开一个空间，多了防止混淆就需要贴个标签，<strong>命个名</strong>；</li><li>我们来通过一张图来理解一下，这个声明概念：</li></ul></li></ul><p><img src="Python文档.assets/2-1.png" style="zoom:80%;margin:0 0 0 30px;" /></p><blockquote><p>那么，如何通过编程来实现变量的声明呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明一个变量</span></span><br><span class="line"><span class="comment"># 注意1：= 不是等于的意思，是赋值的意思</span></span><br><span class="line"><span class="comment"># 注意2：阅读代码从右边向左边阅读，意为：将数字123赋值给变量a</span></span><br><span class="line">a = <span class="number">123</span></span><br><span class="line"><span class="comment"># 输出a</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># a变量被替换</span></span><br><span class="line">a = <span class="number">456</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="2-命名的规则"><a href="#2-命名的规则" class="headerlink" title="2. 命名的规则"></a>2. 命名的规则</h3><ul><li><p>从 <strong>a=123</strong> 的例子中，a是变量名，但变量的名字有什么要求？需要注意哪些规则？能乱起吗？</p><ul><li><p>变量名可以包含<strong>字母、数字、下划线</strong>，但数字不能在变量名首位；</p><ul><li>abc（合法）、a123（合法）、_xyz（合法）、123a（不合法）</li></ul></li><li><p>Python中的关键字无法作为变量名，编辑器会提示，比如：def、class，使用会直接报错；</p></li><li><p>Python中的英文是区分大小写的，大写的A和小写的a不是一种东西；</p></li></ul></li></ul><ul><li><p>为了让变量名更加的有可读性，比如：你的名字，当然，中文变量名也是支持的，但基本不用；</p><ul><li>第一种经典命名方式，驼峰式：yourName，或YourName，我比较喜欢前者；</li><li>第二种经典命名方式：蛇形式：your_name，用的也比较多；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键字错误命名</span></span><br><span class="line"><span class="keyword">def</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">class</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">class</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文命名</span></span><br><span class="line">你的名字 = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(你的名字)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驼峰式</span></span><br><span class="line">yourName = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(yourName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蛇形式</span></span><br><span class="line">your_name = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(your_name)</span><br></pre></td></tr></table></figure><h3 id="3-Shell模式"><a href="#3-Shell模式" class="headerlink" title="3. Shell模式"></a>3. Shell模式</h3><blockquote><p>有时我们要对一些结果进行快速获取，可以直接使用命令行窗口直接输出：Shell模式；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a = 123</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a</span></span><br><span class="line">123</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b = 456</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(b)</span></span><br><span class="line">456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果在主程序本身就已经运行赋值了，直接在命令行输出也是可以的</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; c</span></span><br><span class="line">798</span><br></pre></td></tr></table></figure><h1 id="04-来做四则运算吧-算术"><a href="#04-来做四则运算吧-算术" class="headerlink" title="04. 来做四则运算吧.算术"></a>04. 来做四则运算吧.算术</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><blockquote><p>虽说叫做四则运算，但其实运算符往往不止加减乘除这四种：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">运算</th><th style="text-align:center">符号</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">加</td><td style="text-align:center">+</td><td style="text-align:center">1 + 1</td></tr><tr><td style="text-align:center">减</td><td style="text-align:center">-</td><td style="text-align:center">2 - 1</td></tr><tr><td style="text-align:center">乘</td><td style="text-align:center">*</td><td style="text-align:center">3 * 4</td></tr><tr><td style="text-align:center">除</td><td style="text-align:center">/</td><td style="text-align:center">6 / 2</td></tr><tr><td style="text-align:center">整除</td><td style="text-align:center">//</td><td style="text-align:center">9 // 7</td></tr><tr><td style="text-align:center">求余</td><td style="text-align:center">%</td><td style="text-align:center">10 % 8</td></tr><tr><td style="text-align:center">幂</td><td style="text-align:center">**</td><td style="text-align:center">2**3</td></tr></tbody></table></div><ul><li>在编程语法中乘法 <strong>x</strong> 用 <strong>*</strong> 号代替，除法 <strong>÷</strong> 用 <strong>/</strong> 代替。</li><li>除法 <strong>/</strong> 是保留小数的，而整除 <strong>//</strong> 是直接取整的。</li><li>幂运算中：2**3，2为底数，3为指数，换算成乘法为：2 x 2 x 2。</li></ul><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加减乘除，在末尾Ctrl+D复制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> - <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> * <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> / <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> // <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> % <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ** <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量进行四则运算</span></span><br><span class="line">a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="2-变量自运算"><a href="#2-变量自运算" class="headerlink" title="2. 变量自运算"></a>2. 变量自运算</h3><ul><li>所以自运算，就是让变量本身的值累计运算，比如累加、累减等；<ul><li><strong>+=</strong> 累加，a += 1，相当于a = a + 1;</li><li><strong>-=</strong> 累减，a -= 1，相当于a = a -1;</li><li>其它雷同，不再赘述，加减最为常用；<strong>Python不支持a++语法</strong>；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 累加</span></span><br><span class="line">a+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="3-温度转换器"><a href="#3-温度转换器" class="headerlink" title="3. 温度转换器"></a>3. 温度转换器</h3><ul><li>王二狗被夏天40度的高温热晕了，对于科学爱好者的他还是要计算一下华氏度是多少？</li><li>转换公式为：F = 9 ÷ 5 × C + 32 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 温度转换</span></span><br><span class="line">c = <span class="number">40</span></span><br><span class="line">f = <span class="number">9</span> / <span class="number">5</span> * c + <span class="number">32</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><h1 id="05-有点个性输出-转义"><a href="#05-有点个性输出-转义" class="headerlink" title="05. 有点个性输出.转义"></a>05. 有点个性输出.转义</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-print-不详解"><a href="#1-print-不详解" class="headerlink" title="1. print()不详解"></a>1. print()不详解</h3><blockquote><p>给命令行输出一段内容，可以使用 <strong>print()</strong> 函数；</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:left">print(*objects, sep=’ ‘, end=’\n’, file=sys.stdout)</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:left">objects —表示输出的对象。输出多个对象时，需要用 , （逗号）分隔。</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">sep — 用来间隔多个对象。</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">end — 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符。</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">file — 要写入的文件对象。</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">无</td></tr></tbody></table></div><ul><li>如果只是单纯在控制台输出一些内容，只需要传递一个参数即可：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单的数值输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><ul><li>输出的内容可以<strong>多条数据</strong>，默认空格隔开显示，可以通过参数更改：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以输出多个数据，默认英文逗号隔开</span></span><br><span class="line"><span class="comment"># 输出时，默认会以空格来隔开显示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过sep参数改变显示时间隔符号</span></span><br><span class="line"><span class="comment"># 注意，参数的值需要通过双引号包含，因为它不是数值而是字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>, sep=<span class="string">&quot;-&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>默认情况下，print输出会<strong>自动换行</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下一个print输出后会自动换行</span></span><br><span class="line"><span class="comment"># 可以通过end参数改变这一特性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>, end=<span class="string">&quot;|||&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">456</span>)</span><br></pre></td></tr></table></figure><h3 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2. 转义字符"></a>2. 转义字符</h3><div class="table-container"><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\n</td><td>换行符</td></tr></tbody></table></div><ul><li>以上是比较常用的转义字符，更多的可以搜索查询，暂时我们也用不到；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转义字符输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\&#x27;\&quot;\n123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只使用一个print输出以下图形</span></span><br><span class="line">***</span><br><span class="line">  ***</span><br><span class="line">    ***</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;***\n  ***\n    ***&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="06-吾的身份-类型-格式"><a href="#06-吾的身份-类型-格式" class="headerlink" title="06. 吾的身份.类型.格式"></a>06. 吾的身份.类型.格式</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><div class="table-container"><table><thead><tr><th style="text-align:center">类型名</th><th>转换函数</th><th>说明及示例</th></tr></thead><tbody><tr><td style="text-align:center">整型</td><td>int()</td><td>将合法的字符数值或浮点数转换成整数</td></tr><tr><td style="text-align:center">字符串型</td><td>str()</td><td>将任意内容转换成字符串型</td></tr><tr><td style="text-align:center">浮点型</td><td>float()</td><td>将合法的字符数值或整数转换成浮点数</td></tr><tr><td style="text-align:center">布尔型</td><td>bool()</td><td>将任意内容转换成布尔型</td></tr></tbody></table></div><blockquote><p>为了判断一个变量或内容，可以采用<strong>type()</strong>函数；    </p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:left">type(object)</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:left">object —表现需要获取类型的内容</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">返回一个<class '类型符号'></td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用type()获取四种类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10.15</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;王二狗&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><ul><li>布尔类型只有两个值：<strong>True</strong>和<strong>False</strong>，注意首字母是大写的；</li><li>布尔类型一般用于<strong>条件表达式</strong>的判断，这在后续课程会使用；</li></ul><ul><li>类型转换，有一些条件：<ul><li>转换成整数时，包含字母或其它字符都不能转成整数，只有纯数字才可以</li><li>浮点数同上；</li><li>布尔型只能转换成True和False；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类型转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;123&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">123.34</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&quot;123&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(<span class="number">123</span>)))</span><br></pre></td></tr></table></figure><ul><li>将整型转换成字符串时，无法直观的检查出，所以需要用type()判断；</li></ul><h3 id="2-字符串拼接"><a href="#2-字符串拼接" class="headerlink" title="2. 字符串拼接"></a>2. 字符串拼接</h3><blockquote><p>字符串的连接可以使用 <strong>+号</strong> 或者 <strong>逗号</strong> ，具体如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串拼接，+号紧凑，逗号松散</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我&quot;</span>+<span class="string">&quot;和&quot;</span>+<span class="string">&quot;你&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我&quot;</span> + <span class="string">&quot;和&quot;</span> + <span class="string">&quot;你&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我&quot;</span>,<span class="string">&quot;和&quot;</span>,<span class="string">&quot;你&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量同理</span></span><br><span class="line">a = <span class="string">&quot;我&quot;</span></span><br><span class="line">b = <span class="string">&quot;你&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><h3 id="3-输出格式"><a href="#3-输出格式" class="headerlink" title="3. 输出格式"></a>3. 输出格式</h3><div class="table-container"><table><thead><tr><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>格式化整数，会直接取整</td></tr><tr><td>%f</td><td>格式化浮点数，可以设置保留的小数点</td></tr><tr><td>%s</td><td>字符串</td></tr></tbody></table></div><ul><li>格式化语法如下：<ul><li>“字符串文字%d %s %f”%(3, “嗯嗯”, 3.1415926)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %符的格式化处理</span></span><br><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">age = <span class="number">3.33</span></span><br><span class="line">weight = <span class="number">1.23456</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字叫%s，今年%d岁了，身高%.2f&quot;</span>%(name, age, weight))</span><br></pre></td></tr></table></figure><ul><li>%5.2f：可以理解为5个占位符，不足的用空格占用；</li><li>%10s和%-10s：可以理解为占用10个位置，占用前面和占用后面的区别；</li></ul><h1 id="07-请你告诉我-输入"><a href="#07-请你告诉我-输入" class="headerlink" title="07. 请你告诉我.输入"></a>07. 请你告诉我.输入</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-input-不详解"><a href="#1-input-不详解" class="headerlink" title="1. input()不详解"></a>1. input()不详解</h3><blockquote><p>如果想让用户在键盘输入内容，可以使用 <strong>input()</strong> 函数；</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:left">input([prompt])</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:left">prompt —表示提示输入，[]表示它是可选状态。</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">返回提示内容</td></tr></tbody></table></div><ul><li>如果提示输入为空，则用户会黑灯瞎火的输入，除非本身知道；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在这里写上你的代码 :-)</span></span><br><span class="line"><span class="comment"># 无任何提示的输入，运行时控制台的光标闪烁</span></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将输入的内容，赋值给一个变量</span></span><br><span class="line"><span class="comment"># input()输入的内容，不管字面上是什么都是字符串类型</span></span><br><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure><ul><li>如果加上提示内容，将很好的提示用户正确的输入;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有提示的输入</span></span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&quot;请输入一个数，1-9之间：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h3 id="2-输入转换运算"><a href="#2-输入转换运算" class="headerlink" title="2. 输入转换运算"></a>2. 输入转换运算</h3><blockquote><p>通过输入的两个数值进行运算，必须进行转换；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过输入进行数值计算</span></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个数，1-9之间：&quot;</span>))</span><br><span class="line">d = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个数，1-9之间：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d+%d=%d&quot;</span>%(c, d, c+d))</span><br></pre></td></tr></table></figure><ul><li>最后，再做个经典的图形输出，输入指定图形元素（比如*）得到如下的图：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出三角图形，这里的*号是字符乘法，复制显示数量</span></span><br><span class="line">e = <span class="built_in">input</span>(<span class="string">&quot;请输入任意字符：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,e*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(e*<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h1 id="08-是对还是错-布尔类型"><a href="#08-是对还是错-布尔类型" class="headerlink" title="08. 是对还是错.布尔类型"></a>08. 是对还是错.布尔类型</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-关系运算符"><a href="#1-关系运算符" class="headerlink" title="1. 关系运算符"></a>1. 关系运算符</h3><blockquote><p>布尔类型的值，是专门用于各种<strong>表达式</strong>的判断，表达式的<strong>运算符</strong>如下： </p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">关系运算符</th><th>表达式返回值</th></tr></thead><tbody><tr><td style="text-align:center">大于</td><td style="text-align:center">&gt;</td><td>成立范围True（6 &gt; 5），否则为False（6 &gt; 7）</td></tr><tr><td style="text-align:center">小于</td><td style="text-align:center">&lt;</td><td>成立返回True（6 &lt; 8），否则为False（6 &lt; 5）</td></tr><tr><td style="text-align:center">等于</td><td style="text-align:center">==</td><td>成立返回True（6 == 6），否则为False（6 == 7）</td></tr><tr><td style="text-align:center">大于等于</td><td style="text-align:center">&gt;=</td><td>成立返回True（7 &gt;= 6），否则为False（7 &gt;= 8）</td></tr><tr><td style="text-align:center">小于等于</td><td style="text-align:center">&lt;=</td><td>成立返回True（6 &lt;= 6），否则为False（6 &lt;= 5）</td></tr><tr><td style="text-align:center">不等于</td><td style="text-align:center">!=</td><td>成立返回True（6 != 5），否则为False（6 != 6）</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表达式返回值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &gt; <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &gt; <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &lt; <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &lt; <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> == <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> == <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &gt;= <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &lt;= <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> != <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="2-逻辑运算符"><a href="#2-逻辑运算符" class="headerlink" title="2. 逻辑运算符"></a>2. 逻辑运算符</h3><blockquote><p>除了关系运算符之外，还有一种叫做逻辑运算符，具体如下：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">逻辑运算符</th><th>表达式返回值</th></tr></thead><tbody><tr><td style="text-align:center">and</td><td style="text-align:center">x and y</td><td>x和y同时为True时，返回True，否则返回False</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">x or y</td><td>x和y只要其中之一为True，返回True，否则返回False</td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">not x</td><td>x为True时，结果为False，否则为True</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">6</span> <span class="keyword">and</span> <span class="number">5</span> &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> &gt; <span class="number">6</span> <span class="keyword">and</span> <span class="number">5</span> &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">6</span> <span class="keyword">or</span> <span class="number">5</span> &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">6</span> <span class="keyword">or</span> <span class="number">5</span> &lt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">5</span> &gt; <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="09-周一穿新衣-条件判断"><a href="#09-周一穿新衣-条件判断" class="headerlink" title="09. 周一穿新衣.条件判断"></a>09. 周一穿新衣.条件判断</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-if…单一条件"><a href="#1-if…单一条件" class="headerlink" title="1. if…单一条件"></a>1. if…单一条件</h3><blockquote><p>假设你一周七天中只有周一才能穿新衣服，那么就需要 <strong>if语句</strong> 中 <strong>单一条件判断</strong>： </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">S(程序开始)--&gt;A[/输入星期几/]</span><br><span class="line">A --&gt; B&#123;判断是否星期一&#125;;</span><br><span class="line">B--&gt;|满足条件|C[穿上新衣];</span><br><span class="line">C--&gt;D([程序结束]);</span><br><span class="line">B---|未满足条件|D(程序结束);</span><br></pre></td></tr></table></figure><ul><li>单一条件判断的<strong>if语句</strong>格式如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if 条件判断:</span><br><span class="line">条件满足时，执行</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：判断的数值需要转换为整数再判断</span></span><br><span class="line"><span class="comment"># 注意2：a == 1由于习惯或方式，可以加上括号(a == 1)</span></span><br><span class="line"><span class="comment"># 注意3：if条件判断内的语句，需要用Tab键缩进才能识别</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入今天星期几，1-7之间：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天穿新衣&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-if…else分支"><a href="#2-if…else分支" class="headerlink" title="2. if…else分支"></a>2. if…else分支</h3><blockquote><p>单一if语句比较高冷，如果未满足条件，ta就不理你了；而<strong>else分支</strong>则可爱许多； </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">S([程序开始]) --&gt; A[/输入星期几/]</span><br><span class="line">A --&gt; B&#123;判断是否星期一&#125;;</span><br><span class="line">B--&gt;|满足条件|C[穿上新衣];</span><br><span class="line">C--&gt;E(程序结束);</span><br><span class="line">B--&gt;|未满足条件|D[不穿新衣];</span><br><span class="line">D--&gt;E([程序结束]);</span><br></pre></td></tr></table></figure><ul><li>else分支条件判断的<strong>if语句</strong>格式如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件判断:</span><br><span class="line">条件满足时，执行</span><br><span class="line">else:</span><br><span class="line">条件不满足时，执行</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：else后面有冒号，表示结束</span></span><br><span class="line"><span class="comment"># 注意2：else需要和if在同一垂直位对齐，否则报错</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天穿新衣&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天无法穿新衣&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-日常穿衣表"><a href="#3-日常穿衣表" class="headerlink" title="3. 日常穿衣表"></a>3. 日常穿衣表</h3><blockquote><p>夏天到了，汗渍很多，每日换洗：1，3，5穿A款，2，4，6穿B款，星期日放假不出门；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入今天星期几，1-6之间：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span> <span class="keyword">or</span> a == <span class="number">3</span> <span class="keyword">or</span> a == <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;穿A款&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;穿B款&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="10-我可以退休吗-多重-嵌套"><a href="#10-我可以退休吗-多重-嵌套" class="headerlink" title="10. 我可以退休吗.多重.嵌套"></a>10. 我可以退休吗.多重.嵌套</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-elif…多重分支"><a href="#1-elif…多重分支" class="headerlink" title="1. elif…多重分支"></a>1. elif…多重分支</h3><blockquote><p>年龄决定一个人当前的状态，8岁到80岁，你都在干什么？此时需要<strong>elif多重分支</strong>：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 条件判断:</span><br><span class="line">条件满足时，执行</span><br><span class="line">elif 条件判断:</span><br><span class="line">条件满足时，执行</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8-25之间：求学阶段</span></span><br><span class="line"><span class="comment"># 26-60之间：工作阶段</span></span><br><span class="line"><span class="comment"># 大于60：退休阶段</span></span><br><span class="line">a= <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄：8-80之间：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">8</span> <span class="keyword">and</span> a &lt;=<span class="number">25</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我在上学！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt;=<span class="number">26</span> <span class="keyword">and</span> a&lt;=<span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我在工作！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt; <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我在退休！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这个年龄，尚未被统计！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-if…嵌套判断"><a href="#2-if…嵌套判断" class="headerlink" title="2. if…嵌套判断"></a>2. if…嵌套判断</h3><blockquote><p>难道大于60岁就真的可以退休了吗？真实情况显然不是这样的，我们还需要具体判断：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> a &gt; <span class="number">60</span>:</span><br><span class="line">    <span class="comment"># 如果爷爷有大伯，二伯和我爸</span></span><br><span class="line">    <span class="comment"># 且，我还有姐姐和弟弟</span></span><br><span class="line">    <span class="comment"># 再且，大伯、二伯每家还有三个</span></span><br><span class="line">    <span class="comment"># 为了存压岁钱，也无法退休呢！</span></span><br><span class="line">    b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入子孙的数量，1-9之间：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> b &gt;= <span class="number">7</span> <span class="keyword">and</span> b &lt;=<span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退休后打两份工&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &gt;= <span class="number">4</span> <span class="keyword">and</span> b &lt;=<span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退休后打一份工&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退休中！&quot;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="11-存钱买switch-for循环"><a href="#11-存钱买switch-for循环" class="headerlink" title="11. 存钱买switch.for循环"></a>11. 存钱买switch.for循环</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-for…有限循环"><a href="#1-for…有限循环" class="headerlink" title="1. for…有限循环"></a>1. for…有限循环</h3><blockquote><p>王二狗考试得了双百，就得意的要求买台switch，还保证一周只玩三小时，但妈妈让他自己存；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 集合:</span><br><span class="line">执行语句</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">A([开始程序]) --&gt; B[循环变量初始化]--&gt; C&#123;循环判断&#125;;</span><br><span class="line">C--&gt;|到达循环终值|E([结束程序]);</span><br><span class="line">C--&gt;|未到达循环终值|D[执行循环体]--&gt;F[循环变量自增]--&gt;C;</span><br></pre></td></tr></table></figure><h3 id="2-rang-数值生成"><a href="#2-rang-数值生成" class="headerlink" title="2. rang()数值生成"></a>2. rang()数值生成</h3><blockquote><p>想要实现一个月1-30号的自增循环，那需要使用<strong>rang()</strong>函数；</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:left">range(start[,end,step])</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:left"><strong>start</strong>：计数从start开始，<strong>默认是从0开始</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><strong>end</strong>：计数到end结束，但是不包括end</td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><strong>step</strong>：每次自增的数值，默认1</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">无</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：for...in...语法核心</span></span><br><span class="line"><span class="comment"># 注意2：i是变量，随便定义，每次获取自增后的值</span></span><br><span class="line"><span class="comment"># 注意3：range(1,30)实际上循环到1-29</span></span><br><span class="line"><span class="comment"># 注意4：range第三个参数，设置2体会下</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果range只传入一个参数，默认从0开始到29</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>此时，我们再回到上方的流程图，可能会略懂一二了；</li><li>但是，我们怎么才能知道循环体内的语句在重复执行呢？</li><li>这时，可以采用<strong>调试</strong>中的<strong>步进</strong>或<strong>步入</strong>来逐条执行语句；</li></ul><h3 id="3-终于可以存钱了吗？"><a href="#3-终于可以存钱了吗？" class="headerlink" title="3. 终于可以存钱了吗？"></a>3. 终于可以存钱了吗？</h3><blockquote><p>使用以上学到的循环语句，我们存一个月的钱，对自己狠一点，每天存的钱比前一天多一元；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存一个月的钱</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    t += i;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一个月存了%d元！&quot;</span>%(t))</span><br></pre></td></tr></table></figure><h1 id="12-逃避可耻但有用-退出"><a href="#12-逃避可耻但有用-退出" class="headerlink" title="12. 逃避可耻但有用.退出"></a>12. 逃避可耻但有用.退出</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-break退出整体"><a href="#1-break退出整体" class="headerlink" title="1. break退出整体"></a>1. break退出整体</h3><blockquote><p>过不下去啦，每天要存的金额越来越多，还是放弃吧，王二狗说道；此时，我们需要使用<strong>break终止循环</strong>；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 坚持到第3天，就要放弃</span></span><br><span class="line">    <span class="comment"># 注意：如果将if放在print后面，将执行第3天</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>break语句</strong>的作用：是退出整个循环；</li></ul><h3 id="2-continue退出当前"><a href="#2-continue退出当前" class="headerlink" title="2. continue退出当前"></a>2. continue退出当前</h3><blockquote><p>逃避的加锁禁锢着王二狗的内心，悟道自律才能获得自由；决定：偶数天存钱，奇数天放纵；理由：循序渐进，慢慢来；此时，我们就需要使用<strong>continue终止当前循环</strong>；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 先来简单的，假设第三天不存</span></span><br><span class="line">    <span class="comment"># 注意：continue必须在执行语句前面执行，否则白搭</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>计算偶数的方法：当天日期除以2的余数为0即为偶数，反之奇数；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#判断为奇数就退出当前循环</span></span><br><span class="line">    <span class="comment">#去自增执行下一次循环</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="13-蒙眼拉磨的驴-while循环"><a href="#13-蒙眼拉磨的驴-while循环" class="headerlink" title="13. 蒙眼拉磨的驴.while循环"></a>13. 蒙眼拉磨的驴.while循环</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-while常规循环"><a href="#1-while常规循环" class="headerlink" title="1. while常规循环"></a>1. while常规循环</h3><blockquote><p>常规的 <strong>while循环</strong> 和 <strong>for循环</strong> 基本一致，只不过while更加灵活一点；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化变量1</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># 如果变量小于等于30，则执行循环体</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">30</span>:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line">    <span class="comment"># 当执行完毕，自增1</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>while循环除了普通的循环，还有不少独有的做法，比如<strong>死循环</strong>；</li></ul><h3 id="2-while无限循环"><a href="#2-while无限循环" class="headerlink" title="2. while无限循环"></a>2. while无限循环</h3><blockquote><p>王二狗家有一头拉磨的驴，ta的主人告诉ta，只要每天一直往前走，就会有精彩的未来；此时，我们就需要使用<strong>while中的无限循环</strong>，让其无穷无尽的执行下去；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只要判断表达式永远为True，则不停的执行</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br></pre></td></tr></table></figure><ul><li>请编写一只怀揣梦想、坚持不懈、勇往直前、誓不罢休的驴；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;驴：请问，到达路的尽头了吗？^.^&quot;</span>)</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请告诉驴，到达与否，回车或输入yes：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> a != <span class="string">&quot;yes&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;旁白：还没到，请继续向前！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;驴：加油！加油！努力！奋斗！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;旁白：已经到了！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;驴：真好，我累了，要睡了！❤&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="14-我家住在302-列表入门"><a href="#14-我家住在302-列表入门" class="headerlink" title="14. 我家住在302.列表入门"></a>14. 我家住在302.列表入门</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-九宫格解析"><a href="#1-九宫格解析" class="headerlink" title="1. 九宫格解析"></a>1. 九宫格解析</h3><blockquote><p><strong>列表</strong>其实就是一种可以同时<strong>存放多个数据的变量</strong>，就好比如下图存放了9条数据，但只有一个变量；</p></blockquote><table border="1" style="inline-block;width:60%;">    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">101</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">102</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">103</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">201</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">202</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">203</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">301</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">302</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">303</td>    </tr></table><ul><li>分析上图的九宫格，王二狗家住在第三行第二列的位置上；整体看上去像个容器，例如超市存包的柜子；</li><li>我们如何设置它，获取它，使用它？那就必须是用今天的列表变量；列表声明方式为：<ul><li><strong>列表变量 = [ 数据1, 数据2, 数据3…. ]</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1，array是列表变量名，是随便定义的</span></span><br><span class="line"><span class="comment"># 注意2：列表的值外围是一个中括号，里面的每个数据可以称为元素</span></span><br><span class="line"><span class="comment"># 注意3：每个元素，用逗号隔开，元素太多，可以换行</span></span><br><span class="line"><span class="comment"># 注意4：元素遵循数据类型，如果是字符串元素，要加引号</span></span><br><span class="line"><span class="comment"># 注意5：其它语言一般称为数组，如果我不小心说数组啥啥啥的，等同</span></span><br><span class="line">array = [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>,</span><br><span class="line">         <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>,</span><br><span class="line">         <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出列表，带上中括号原封不动的输出</span></span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 看看什么类型，&lt;class &#x27;list&#x27;&gt;列表类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><h3 id="2-理解下标"><a href="#2-理解下标" class="headerlink" title="2. 理解下标"></a>2. 理解下标</h3><blockquote><p>什么是<strong>下标</strong>？即：列表中元素对应的<strong>位置编号</strong>，或称为：<strong>索引</strong>，默认从0开始计算；</p></blockquote><table border="1" style="inline-block;width:60%;">    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">0</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">1</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">2</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">3</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">4</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">5</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">6</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">7</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">8</td>    </tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取王二狗的家</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">7</span>])</span><br></pre></td></tr></table></figure><ul><li><p>除了直接通过下标获取指定位置的元素值，还有一些其它语法：</p><ul><li><p>为了避免混淆，我不把下标0说成第1个位置（我会说下标为0的元素）；</p></li><li><p>array[0]：获取下标为0的位置的元素，这里获取的是101；</p></li><li><p>array[2:4]：获取下标为2到3的元素，这里获取的是[103, 201]，返回一个新list；</p></li><li><p>array[2:]：获取下标为2到end的元素，这里获取的是[103…303]，返回一个新list；</p></li><li><p>array[:2]：获取下标为start到1的元素，这里获取的是[101,102]，返回一个新list；</p></li><li><p>array[-2]：获取倒数第2个元素，这里获取的是[302]；</p></li><li><p>array[-5:-2]：获取倒数第5到倒数第3的元素，这里获取的是：[202, 203, 301]，返回一个新list；</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(array[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(array[:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(array[-<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(array[-<span class="number">5</span>:-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h1 id="15-点出万物-列表操作"><a href="#15-点出万物-列表操作" class="headerlink" title="15. 点出万物.列表操作"></a>15. 点出万物.列表操作</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-点语法启蒙"><a href="#1-点语法启蒙" class="headerlink" title="1. 点语法启蒙"></a>1. 点语法启蒙</h3><blockquote><p>列表是一种<strong>容器类</strong>的结构，势必会给予它较为丰富的操作，比如点语法的操作方法：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表变量.操作方法()</span><br></pre></td></tr></table></figure><ul><li><strong>.操作方法()</strong>可以理解为列表变量下的<strong>特有函数</strong>；</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.append(o)</td><td>在列表末尾添加o元素</td></tr><tr><td style="text-align:left">.insert(i, o)</td><td>在指定位置插入o元素</td></tr><tr><td style="text-align:left">.remove(o)</td><td>移除匹配到o元素的第一个</td></tr><tr><td style="text-align:left">.pop(i)</td><td>取出列表中最后一个元素，或指定元素；然后返回该元素的值</td></tr><tr><td style="text-align:left">.extend(s)</td><td>在列表尾部合并另一个列表</td></tr></tbody></table></div><h3 id="2-增删改查"><a href="#2-增删改查" class="headerlink" title="2. 增删改查"></a>2. 增删改查</h3><blockquote><p>通过自身语法以及点语法，我们可以对列表进行一系列的 <strong>增删改查</strong> 操作：</p></blockquote><ul><li>先创建一个空列表，以便于我们操作：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空的列表</span></span><br><span class="line">array = []</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><ul><li>.append()方法添加元素，会在列表尾部添加一条</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.append()方法添加元素</span></span><br><span class="line">array.append(<span class="number">101</span>)</span><br><span class="line">array.append(<span class="number">102</span>)</span><br><span class="line">array.append(<span class="number">103</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.insert()方法在某一处插入元素，用下标来指定位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.insert()在指定下标位置插入元素</span></span><br><span class="line">array.insert(<span class="number">0</span>, <span class="number">109</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.remove()方法删除元素，会找到第一个匹配值的元素删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.remove()方法删除元素</span></span><br><span class="line"><span class="comment"># 注意：参数需填写元素的值</span></span><br><span class="line">array.remove(<span class="number">102</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.pop()方法取出元素，使用下标定位，再返回这个元素值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.pop()方法删除元素</span></span><br><span class="line"><span class="comment"># 注意1：这个删除严格意义上是取出返回的意思</span></span><br><span class="line"><span class="comment"># 注意2：参数需填写元素的下标</span></span><br><span class="line"><span class="built_in">print</span>(array.pop(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>列表修改的方法，直接通过下标定位赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用[]方式修改元素，传递下标位置即可</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">1001</span></span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.extend()方法参数是要合并的列表，添加到尾部</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.extend()方法合并列表</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1002</span>, <span class="number">1003</span>]</span><br><span class="line">array.extend(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><h1 id="16-超好用的列表工具箱"><a href="#16-超好用的列表工具箱" class="headerlink" title="16. 超好用的列表工具箱"></a>16. 超好用的列表工具箱</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-工具方法"><a href="#1-工具方法" class="headerlink" title="1. 工具方法"></a>1. 工具方法</h3><blockquote><p>包括获取列表元素的数量、获取匹配的下标位置、排序、复制、清空等；</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.count(o)</td><td>统计元素o在列表中出现的次数</td></tr><tr><td>.index(o)</td><td>获取元素o在列表中第一次出现的位置</td></tr><tr><td>.reverse()</td><td>反转列表</td></tr><tr><td>.sort(reverse=True)</td><td>排序，默认从小到大排序，设置reverse参数为True则反之</td></tr><tr><td>.copy()</td><td>复制列表</td></tr><tr><td>.clear()</td><td>清空列表</td></tr></tbody></table></div><ul><li>依旧先创建一个九宫格列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据不同演示的方法会做出修改</span></span><br><span class="line">array = [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>,</span><br><span class="line">         <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>,</span><br><span class="line">         <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">102</span>, <span class="number">102</span>]</span><br></pre></td></tr></table></figure><ul><li>.count()方法获取指定元素出现的次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .count()方法</span></span><br><span class="line"><span class="built_in">print</span>(array.count(<span class="number">102</span>))</span><br></pre></td></tr></table></figure><ul><li>.index()方法获取指定元素第一次出现的位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .index()方法</span></span><br><span class="line"><span class="built_in">print</span>(array.index(<span class="number">102</span>))</span><br></pre></td></tr></table></figure><ul><li>.reverse()方法可以让原列表进行翻转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .reverse()方法，反转原列表</span></span><br><span class="line"><span class="comment"># 注意：这个方法本身不返回反转，而是让原列表反转</span></span><br><span class="line">array.reverse()</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.sort()方法可以让原列表进行排序，参数可以设置大小排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .sort()方法，默认从小到大排序原列表</span></span><br><span class="line"><span class="comment"># 参数reverse=True|False，从大到小和反之</span></span><br><span class="line">array.sort()</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line">array.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.copy()方法，是拷贝一份独立的列表赋值给新变量</li><li>.clear()方法，清空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .copy()方法，将列表复制出来交给新变量</span></span><br><span class="line"><span class="comment"># 注意：赋值和拷贝的区别，本课不深究</span></span><br><span class="line"><span class="built_in">list</span> = array.copy()</span><br><span class="line"><span class="comment">#list = array</span></span><br><span class="line">array.pop()</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .clear()方法，清空</span></span><br><span class="line"><span class="built_in">list</span>.clear()</span><br></pre></td></tr></table></figure><h3 id="2-工具函数"><a href="#2-工具函数" class="headerlink" title="2. 工具函数"></a>2. 工具函数</h3><blockquote><p>这里推荐三个极其常用的函数，来快速获取想要的对应数据：<strong>min()</strong>、<strong>max()</strong>、<strong>len()</strong>；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># len()函数，获取长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(array))</span><br><span class="line"><span class="comment"># min()函数，获取最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(array))</span><br><span class="line"><span class="comment"># max()函数，获取最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(array))</span><br></pre></td></tr></table></figure><h3 id="3-del语句和遍历"><a href="#3-del语句和遍历" class="headerlink" title="3. del语句和遍历"></a>3. del语句和遍历</h3><blockquote><p>还有一个删除列表的快捷语句 <strong>del</strong> 和 <strong>循环列表</strong> 数据的遍历方法；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除某一个元素或多个元素</span></span><br><span class="line"><span class="keyword">del</span> array[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">del</span> array[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 删除整个列表</span></span><br><span class="line"><span class="comment"># 注意：这里不是清空，是直接把array变量给抹除了</span></span><br><span class="line"><span class="keyword">del</span> array</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历列表，两种方法，1.没必要 2.不错</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">    <span class="built_in">print</span>(array[i], end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="17-我…只可远观-元祖"><a href="#17-我…只可远观-元祖" class="headerlink" title="17. 我…只可远观.元祖"></a>17. 我…只可远观.元祖</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-只读的列表"><a href="#1-只读的列表" class="headerlink" title="1. 只读的列表"></a>1. 只读的列表</h3><blockquote><p>元祖相对于列表，有两个最主要的特性：1. 数据集用圆括号包含；2. 数据只读，无法修改删除；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：创建时()包含，但输出还用[]</span></span><br><span class="line"><span class="comment"># 注意2：无法修改删除，array[0] = 1001 将报错</span></span><br><span class="line"><span class="comment"># 注意3：type()后得知元祖是tuple[tʌpl]类型</span></span><br><span class="line"><span class="comment"># 注意4：如果创建的元祖只有一条元素，需要补上逗号</span></span><br><span class="line">array = (<span class="number">101</span>, <span class="number">102</span>, <span class="number">203</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><h3 id="2-元祖遍历"><a href="#2-元祖遍历" class="headerlink" title="2. 元祖遍历"></a>2. 元祖遍历</h3><blockquote><p>遍历和列表一致；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元祖遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="18-花括号有话要说-字典"><a href="#18-花括号有话要说-字典" class="headerlink" title="18. 花括号有话要说.字典"></a>18. 花括号有话要说.字典</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-一一配对的概念"><a href="#1-一一配对的概念" class="headerlink" title="1. 一一配对的概念"></a>1. 一一配对的概念</h3><blockquote><p>字典的核心就是：<strong>配对</strong>！即：<strong>键值对(key:value)</strong>！就是将列表中的下标索引进行自定义设计；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典创建的语法，通过 花括号 以及 key:value 的方式构成：</span></span><br><span class="line">字典变量 = &#123;键:值, 键:值, ...&#125;</span><br></pre></td></tr></table></figure><ul><li>创建空的字典，有两种方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空字典，有两种方式1. &#123;&#125; 2. dict()</span></span><br><span class="line"><span class="comment">#array = &#123;&#125;</span></span><br><span class="line">array = <span class="built_in">dict</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><ul><li>创建带数据的字典：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典，键值配对</span></span><br><span class="line"><span class="comment"># 注意1：冒号左边称为：键(key)，右边称为：值(value)</span></span><br><span class="line"><span class="comment"># 注意2：依然遵循数据类型规则，key或value，数字不加引号，字符加</span></span><br><span class="line"><span class="comment"># 注意3：通过key找value，依然用中括号，但字符串不能省略引号</span></span><br><span class="line">array = &#123;</span><br><span class="line">            <span class="string">&quot;A1&quot;</span>:<span class="string">&quot;张三&quot;</span>, </span><br><span class="line">            <span class="string">&quot;A2&quot;</span>:<span class="string">&quot;李四&quot;</span>, </span><br><span class="line">            <span class="string">&quot;A3&quot;</span>:<span class="string">&quot;王二狗&quot;</span>,</span><br><span class="line">            <span class="string">&quot;A4&quot;</span>:<span class="string">&quot;马六&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(array[<span class="string">&quot;A3&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="2-字典的操作"><a href="#2-字典的操作" class="headerlink" title="2. 字典的操作"></a>2. 字典的操作</h3><blockquote><p>和列表一样，字典也需要进行增删查改的操作；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典新增</span></span><br><span class="line">array[<span class="string">&quot;A5&quot;</span>] = <span class="string">&quot;王五&quot;</span></span><br><span class="line"><span class="comment"># 字典删除，和列表一样</span></span><br><span class="line"><span class="comment">#del array[&quot;A4&quot;]</span></span><br><span class="line">array.pop(<span class="string">&quot;A4&quot;</span>)</span><br><span class="line"><span class="comment"># 字典修改</span></span><br><span class="line">array[<span class="string">&quot;A1&quot;</span>] = <span class="string">&quot;张四&quot;</span> </span><br></pre></td></tr></table></figure><ul><li><p>和列表一样，字典也具有<strong>.copy()</strong>和<strong>.clear()</strong>方法以及<strong>min()</strong>、<strong>max()</strong>和<strong>len()</strong>等函数，这里不再赘述；</p></li><li><p>字典也有自己独有的方法，方便更好的操作：</p></li></ul><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.get(key, default)</td><td>返回指定key的值，如果不存在则返回default默认值</td></tr><tr><td>.keys()</td><td>返回字典中所有的key组成的列表，可再通过遍历输出</td></tr><tr><td>.values()</td><td>同上</td></tr><tr><td>.items()</td><td>返回字典中所有的(key,value)组成的元祖，再通过遍历输出</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取指定key的value，如果不在，返回指定值</span></span><br><span class="line"><span class="built_in">print</span>(array.get(<span class="string">&quot;A3&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(array.get(<span class="string">&quot;A9&quot;</span>, <span class="string">&quot;不存在&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.keys()返回所有key</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array.keys():</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.values()返回所有values</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array.values():</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 通过.items()返回所有(key,value)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array.items():</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="19-学籍卡系统-二维查"><a href="#19-学籍卡系统-二维查" class="headerlink" title="19. 学籍卡系统.二维查"></a>19. 学籍卡系统.二维查</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-二维的概念"><a href="#1-二维的概念" class="headerlink" title="1. 二维的概念"></a>1. 二维的概念</h3><blockquote><p>什么是一维？就是普通列表，一行数据；什么是二维？就是多行数据，表格式数据；</p></blockquote><ul><li>我们首先要创建一个空的字典，用来存储每个学员的学籍卡；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化区</span></span><br><span class="line">s = &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>但是，为了测试查询方便，先填充三条学员数据，具体形式如下表格：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">年龄</th></tr></thead><tbody><tr><td style="text-align:center">A1</td><td style="text-align:center">张三</td><td style="text-align:center">男</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">A2</td><td style="text-align:center">李四</td><td style="text-align:center">女</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">A3</td><td style="text-align:center">王二狗</td><td style="text-align:center">男</td><td style="text-align:center">12</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># s是字典</span></span><br><span class="line"><span class="comment"># 注意1：整个学籍卡用字典来表示，这样直接可以通过key快速查找</span></span><br><span class="line"><span class="comment"># 注意2：但是value不是普通的数据，它是一个列表，是一串数据</span></span><br><span class="line"><span class="comment"># 注意3：对于字典里的value，本身可以通过s[&quot;A3&quot;]访问，但得到是list类型</span></span><br><span class="line"><span class="comment"># 注意4：对于list列表类型，再通过[]号获取：s[&quot;A3&quot;][0]得到&quot;王二狗&quot;</span></span><br><span class="line"><span class="comment"># 注意5：两个中括号，可以理解为嵌套list，或list里的list，这就是二维</span></span><br><span class="line">s = &#123;</span><br><span class="line">        <span class="string">&quot;A1&quot;</span>:[<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">12</span>], </span><br><span class="line">        <span class="string">&quot;A2&quot;</span>:[<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">11</span>],</span><br><span class="line">        <span class="string">&quot;A3&quot;</span>:[<span class="string">&quot;王二狗&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">12</span>],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-while-Ture"><a href="#2-while-Ture" class="headerlink" title="2. while Ture"></a>2. while Ture</h3><blockquote><p>对于一款小软件，只有在用户主动关闭才能退出，我们通过死循环来实现；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 选项开启</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入要操作的选项：\n1.查看学籍 2.添加学籍 3.修改学籍 4.删除学籍\n请选择，1-4之间：&quot;</span>))</span><br><span class="line">    <span class="comment"># 判断选项</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;show&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;add&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;update&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;delete&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>用二维查询的方法建立表格，实现数据的展现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标头</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-3s %-7s %-5s %-5s&quot;</span>%(<span class="string">&quot;编号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;年龄&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历学籍卡</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.items():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-4s %-8s %-5s %-5s&quot;</span>%(i[<span class="number">0</span>], i[<span class="number">1</span>][<span class="number">0</span>], i[<span class="number">1</span>][<span class="number">1</span>], i[<span class="number">1</span>][<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h1 id="20-学籍卡系统-增删改"><a href="#20-学籍卡系统-增删改" class="headerlink" title="20. 学籍卡系统.增删改"></a>20. 学籍卡系统.增删改</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-增加数据"><a href="#1-增加数据" class="headerlink" title="1. 增加数据"></a>1. 增加数据</h3><blockquote><p>通过input()录入来写入数据到字典中，key是编号，而value是列表；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信息录入</span></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入编号：&quot;</span>)</span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">c = <span class="built_in">input</span>(<span class="string">&quot;请输入性别：&quot;</span>)</span><br><span class="line">d = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入s</span></span><br><span class="line">s[a] = [b,c,d]</span><br><span class="line"></span><br><span class="line"><span class="comment">#空一行</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="2-修改数据"><a href="#2-修改数据" class="headerlink" title="2. 修改数据"></a>2. 修改数据</h3><blockquote><p>查询数据，通过input()获取编号后，录入修改的内容，再更新；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询并修改</span></span><br><span class="line">f = <span class="built_in">input</span>(<span class="string">&quot;请输入编号：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> s.get(f, <span class="string">&quot;no&quot;</span>) != <span class="string">&quot;no&quot;</span>:</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">input</span>(<span class="string">&quot;请输入性别：&quot;</span>)</span><br><span class="line">    d = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line">    s[f] = [b, c, d]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;编号有误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#空一行</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h3><blockquote><p>查询数据，通过input()获取编号后，直接del即可；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询并删除</span></span><br><span class="line">f = <span class="built_in">input</span>(<span class="string">&quot;请输入编号：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> s.get(f, <span class="string">&quot;no&quot;</span>) != <span class="string">&quot;no&quot;</span>:</span><br><span class="line">    <span class="keyword">del</span> s[f]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;编号有误！&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#空一行</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h1 id="21-重新回顾字符串类型"><a href="#21-重新回顾字符串类型" class="headerlink" title="21. 重新回顾字符串类型"></a>21. 重新回顾字符串类型</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-常规功能合集"><a href="#1-常规功能合集" class="headerlink" title="1. 常规功能合集"></a>1. 常规功能合集</h3><blockquote><p>字符串本身有一些功能，有些之前运用过，这里总结如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 功能一：判断字符串类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;Hello&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">123</span>))     <span class="comment"># 转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能二：连接字符段片段</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;python!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a + b)        <span class="comment"># 没有空格</span></span><br><span class="line"><span class="built_in">print</span>(a, b)         <span class="comment"># 包含一个空格 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能三：重复字符</span></span><br><span class="line">c = <span class="string">&quot;^.^ &quot;</span></span><br><span class="line"><span class="built_in">print</span>(c * <span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-类似列表的特性"><a href="#2-类似列表的特性" class="headerlink" title="2. 类似列表的特性"></a>2. 类似列表的特性</h3><blockquote><p>如果把字符串每个字符当成列表的元素，将会有很多处理方案：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串理解为列表</span></span><br><span class="line"><span class="comment"># 注意：但是列表中方法和工具不一定都能用</span></span><br><span class="line">d = <span class="string">&quot;abcdefghijklmn&quot;</span></span><br><span class="line"><span class="comment"># 输入b，那么下标位置为1</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(d[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="number">2</span>:<span class="number">8</span>])</span><br><span class="line"><span class="comment"># 第三个冒号是step步长</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="number">2</span>:<span class="number">8</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 可以用工具函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串也可以像列表一样遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-格式化数据"><a href="#3-格式化数据" class="headerlink" title="3. 格式化数据"></a>3. 格式化数据</h3><blockquote><p>之前已经学习过%d、%f、%s等格式化输出的方式，再看一些变种：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line"><span class="comment">#t = &quot;hello&quot;</span></span><br><span class="line"><span class="comment">#s = t + &quot;python&quot;</span></span><br><span class="line">t = <span class="string">&quot;hello%s&quot;</span></span><br><span class="line">s = t%<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;我叫%s，今年%d岁，身高%.2f米&quot;</span></span><br><span class="line">y = x%(<span class="string">&quot;王二狗&quot;</span>,<span class="number">10</span>,<span class="number">1.45</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h1 id="22-超好用的字符串工具箱"><a href="#22-超好用的字符串工具箱" class="headerlink" title="22. 超好用的字符串工具箱"></a>22. 超好用的字符串工具箱</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-判断方法"><a href="#1-判断方法" class="headerlink" title="1. 判断方法"></a>1. 判断方法</h3><blockquote><p>字符串有一些用于判断数据的工具函数：成立返回True，失败返回False</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.isnumeric()、.isdigit()</td><td>判断字符串是否只包含了数字</td></tr><tr><td>.isalpha()</td><td>判断字符串是否只包含了字母</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否只包含数字</span></span><br><span class="line">a = <span class="string">&quot;123&quot;</span></span><br><span class="line">b = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.isdigit())</span><br><span class="line"><span class="built_in">print</span>(b.isdigit())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否只包含字母</span></span><br><span class="line">c = <span class="string">&quot;abc&quot;</span></span><br><span class="line">d = <span class="string">&quot;abc123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c.isalpha())</span><br><span class="line"><span class="built_in">print</span>(d.isalpha())</span><br></pre></td></tr></table></figure><h3 id="2-转换方法"><a href="#2-转换方法" class="headerlink" title="2. 转换方法"></a>2. 转换方法</h3><blockquote><p>字符串有一些用于转换数据的工具函数：直接返回转换后的数据</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.lower()</td><td>将英文的字符串全部转换为小写</td></tr><tr><td>.upper()</td><td>同上，大写</td></tr><tr><td>.format()</td><td>格式化</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写转换，格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.lower())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&#123;&#125;45&#123;&#125;6&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&#123;1&#125;45&#123;0&#125;6&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-查询处理方法"><a href="#3-查询处理方法" class="headerlink" title="3. 查询处理方法"></a>3. 查询处理方法</h3><blockquote><p>字符串有一些用于查询处理数据的工具函数：返回新的字符串</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.find(s[, start, end])</td><td>判断是否包含子字符串，返回下标索引，否则返回-1</td></tr><tr><td></td><td>start：开始下标索引位置，默认0，end：结束下标索引位置，默认为字符串长度</td></tr><tr><td></td><td></td></tr><tr><td>.replace(s1, s2[,max])</td><td>将字符串中的s1替换成s2后生成新的字符串</td></tr><tr><td></td><td>s1：将要被替换的字符串  s2：新字符串  max：替换次数</td></tr><tr><td></td><td></td></tr><tr><td>.split(s, n)</td><td>将字符串切割后形成一个字符串列表</td></tr><tr><td></td><td>s：分隔符  n：切割次数  默认值：-1，即切割所有</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询、替换、切割</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.find(<span class="string">&quot;d&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.find(<span class="string">&quot;d&quot;</span>, <span class="number">6</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.replace(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.replace(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.split(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.split(<span class="string">&quot;1&quot;</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h1 id="23-我点一份随便-随机库"><a href="#23-我点一份随便-随机库" class="headerlink" title="23. 我点一份随便.随机库"></a>23. 我点一份随便.随机库</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-引入库概念"><a href="#1-引入库概念" class="headerlink" title="1. 引入库概念"></a>1. 引入库概念</h3><blockquote><p>Python有大量的功能需要借助丰富的库来实现，随机库 <strong>random</strong> 是其中一种：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入随机库</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机1-100之间</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><ul><li>一般来说，库的原名太长，我们可以设置一个别名方便调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置库的别名</span></span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> r</span><br><span class="line"><span class="built_in">print</span>(r.randint(<span class="number">1</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="2-常用的随机方法"><a href="#2-常用的随机方法" class="headerlink" title="2. 常用的随机方法"></a>2. 常用的随机方法</h3><blockquote><p>除了上面的 <strong>.randint()</strong> 整数随机，还有其它的一系列随机数：</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.randint(s, e)</td><td>返回s~e之间的一个随机整数</td></tr><tr><td>.uniform(s, e)</td><td>返回s~e之间的一个随机小数</td></tr><tr><td>.randrange(s, e, p)</td><td>同第一条，p是步长</td></tr><tr><td>.choice(s)</td><td>从元祖中随机获取一个元素</td></tr><tr><td>.shuffle(s)</td><td>打乱原列表</td></tr><tr><td>.sample(s, n)</td><td>随机从s列表中取出n个元素组成新列表</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机小数</span></span><br><span class="line"><span class="built_in">print</span>(r.uniform(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机规律整数</span></span><br><span class="line"><span class="comment"># 随机奇数，偶数</span></span><br><span class="line"><span class="built_in">print</span>(r.randrange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(r.randrange(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从元祖数据中随机产生一个</span></span><br><span class="line"><span class="built_in">print</span>(r.choice((<span class="string">&quot;ScratchJR&quot;</span>, <span class="string">&quot;Scratch&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打乱原列表</span></span><br><span class="line">array = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>]</span><br><span class="line">r.shuffle(array)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机取出元素组成新列表</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(r.sample(<span class="built_in">list</span>, <span class="number">3</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="24-小海龟起航-turtle库"><a href="#24-小海龟起航-turtle库" class="headerlink" title="24. 小海龟起航.turtle库"></a>24. 小海龟起航.turtle库</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-turtle库入门"><a href="#1-turtle库入门" class="headerlink" title="1. turtle库入门"></a>1. turtle库入门</h3><blockquote><p><strong>turtle</strong>，即：海龟；和随机库一样，是Python中一种 <strong>绘图工具</strong> 库，也叫 <strong>海龟库</strong>：</p></blockquote><ul><li>先用最少的代码，画上一笔，注意会有图形界面：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入海龟库</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画一笔，向前(默认右)画100步(单位：像素)</span></span><br><span class="line">t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.forward(d)</td><td>面朝当前方向前进d个距离，d单位是像素</td></tr><tr><td>.back(d)</td><td>同上，后退</td></tr></tbody></table></div><ul><li>绘图结束时，需要使用.done()方法来暂停绘制：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂停画笔绘制，不会关闭窗口，等待用户交互（比如关闭窗口）</span></span><br><span class="line"><span class="comment"># 注意1：在某些其它Python开发工具，没有.done()会自动关闭窗口</span></span><br><span class="line"><span class="comment"># 注意2：而.done()方法放在绘图代码结尾，保证窗口悬停</span></span><br><span class="line"><span class="comment"># 注意3：既然.done()是暂停的意思，后面再绘图便无效</span></span><br><span class="line"><span class="comment"># 注意4：本开发工具Mu Editor不会自动关闭，学习时不必每次调用</span></span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure><h3 id="2-角度的概念"><a href="#2-角度的概念" class="headerlink" title="2. 角度的概念"></a>2. 角度的概念</h3><blockquote><p>在绘制图形时，有时需要转向，那么就需要调整前进箭头的指向（角度）即可</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.left(a)</td><td>设置当前角度左转a度，a的取值0-360</td></tr><tr><td>.right(d)</td><td>同上，右转</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拐个弯，向左拐90度</span></span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 再向前100步</span></span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 拐个弯，向右拐90度</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 再向前100步，或后退</span></span><br><span class="line"><span class="comment">#t.forward(100)</span></span><br><span class="line">t.back(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="3-设置箭头造型"><a href="#3-设置箭头造型" class="headerlink" title="3. 设置箭头造型"></a>3. 设置箭头造型</h3><blockquote><p>为什么叫小海龟呢？因为箭头是可以设置为小海龟的，当然，默认是箭头</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.shape()</td><td>设置箭头的造型：arrow、turtle、circle、square、triangle、classic</td></tr><tr><td>.hideturtle()</td><td>设置绘图结束后，隐藏箭头</td></tr><tr><td>.showturtle()</td><td>同上，相反</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置箭头造型</span></span><br><span class="line">t.shape(<span class="string">&quot;turtle&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏海龟</span></span><br><span class="line">t.hideturtle()</span><br></pre></td></tr></table></figure><h1 id="25-正方形-三角形-多边形-圆"><a href="#25-正方形-三角形-多边形-圆" class="headerlink" title="25. 正方形.三角形.多边形.圆"></a>25. 正方形.三角形.多边形.圆</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-正方形-三角形"><a href="#1-正方形-三角形" class="headerlink" title="1. 正方形.三角形"></a>1. 正方形.三角形</h3><blockquote><p>通过计算总度数（360）除以要绘制的边数，就可以得到正方形和三角形的绘制角度</p></blockquote><ul><li>正方形四条边，那么角度为：360 / 4 = 90°</li><li>三角形三条边，那么角度为：360 / 3 = 120°</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制正方形</span></span><br><span class="line"><span class="comment"># 注意1：forward可以简写fd，back=&gt;bk</span></span><br><span class="line"><span class="comment"># 注意2：right可以简写rt，left=&gt;lt</span></span><br><span class="line"><span class="comment"># 注意3：推荐初学者用完全单词，不然都不知道啥意思</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.right(<span class="number">90</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.left(<span class="number">120</span>)</span><br></pre></td></tr></table></figure><h3 id="2-多边形绘制"><a href="#2-多边形绘制" class="headerlink" title="2. 多边形绘制"></a>2. 多边形绘制</h3><blockquote><p>我们需要通过计算多边形的角度来获取要拐弯的角度，具体如下：</p></blockquote><ul><li>turtle库提供了类似input()函数的输入方法：</li></ul><div class="table-container"><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.numinput(t, p)</td><td>弹窗输入框，t为标题文本，p为描述信息</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取多边形的边</span></span><br><span class="line">n = t.numinput(<span class="string">&quot;OK&quot;</span>, <span class="string">&quot;请输入多边形的边数：&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制多边形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(n)):</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.right(<span class="number">360</span> / n)</span><br></pre></td></tr></table></figure><h3 id="3-圆"><a href="#3-圆" class="headerlink" title="3. 圆"></a>3. 圆</h3><blockquote><p>圆的绘制，有自己单独的方法：<strong>.circle</strong>()</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.circle(r[, extent=None, steps=None])</td><td>绘制一个圆，r是半径，可负数</td></tr><tr><td></td><td>e可选，弧形的角度</td></tr><tr><td></td><td>s可选，多边形边数</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制圆</span></span><br><span class="line">t.circle(<span class="number">150</span>)</span><br><span class="line">t.circle(-<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 半圆</span></span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多边形</span></span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">180</span>, <span class="number">7</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">360</span>, <span class="number">7</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, steps=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h1 id="26-品味穿搭-画笔设置"><a href="#26-品味穿搭-画笔设置" class="headerlink" title="26. 品味穿搭.画笔设置"></a>26. 品味穿搭.画笔设置</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-画笔设置"><a href="#1-画笔设置" class="headerlink" title="1. 画笔设置"></a>1. 画笔设置</h3><blockquote><p>海龟库绘制时的线条是可以设置的：包括颜色、粗细以及绘制速度等</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.speed(s)</td><td>设置绘图的速度：0或大于10表示瞬间绘制，1~10之间，1最慢，10最快</td></tr><tr><td>.color(p[,f])</td><td>设置所有颜色，包括笔头和绘制的线条，以及填充</td></tr><tr><td>.pencolor(c)</td><td>设置画笔颜色，绘制的线条以及笔头的轮廓部分</td></tr><tr><td>.pensize(s)</td><td>设置画笔粗细，填入数字，最小值1</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置为海龟</span></span><br><span class="line">t.shape(<span class="string">&quot;turtle&quot;</span>)</span><br><span class="line"><span class="comment"># 设置颜色，只有一个参数，则设置所有，如有第二参数，为填充</span></span><br><span class="line">t.color(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="comment"># 设置画笔颜色，箭头只会轮廓被覆盖</span></span><br><span class="line">t.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="comment"># 设置画笔粗细</span></span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 设置绘制速度</span></span><br><span class="line">t.speed(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>设置颜色的方式推荐两种：英文单词和RGB代码<ul><li>英文单词比如：black、red、blue等；</li><li>RGB代码比如：(0, 0, 0)、(255, 255,255)，范围0~255之间；</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">红</th><th style="text-align:center">黑</th><th style="text-align:center">白</th><th style="text-align:center">黄</th></tr></thead><tbody><tr><td style="text-align:center"><strong>red</strong></td><td style="text-align:center"><strong>black</strong></td><td style="text-align:center"><strong>white</strong></td><td style="text-align:center"><strong>yellow</strong></td></tr><tr><td style="text-align:center"><strong>绿</strong></td><td style="text-align:center"><strong>粉</strong></td><td style="text-align:center"><strong>橙</strong></td><td style="text-align:center"><strong>紫</strong></td></tr><tr><td style="text-align:center"><strong>green</strong></td><td style="text-align:center"><strong>pink</strong></td><td style="text-align:center"><strong>orange</strong></td><td style="text-align:center"><strong>purple</strong></td></tr></tbody></table></div><p><img src="Python文档.assets/20200409120154580.png" alt="tkcolorchart" style="zoom:80%;" /></p><ul><li>图片来源于：<a href="https://blog.csdn.net/piglite/article/details/105407429">https://blog.csdn.net/piglite/article/details/105407429</a></li></ul><h3 id="2-填充设置"><a href="#2-填充设置" class="headerlink" title="2. 填充设置"></a>2. 填充设置</h3><blockquote><p>如何在绘制好的封闭区域进行填充呢？比如一个圆</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.fillcolor(c)</td><td>设置填充的颜色</td></tr><tr><td>.begin_fill()</td><td>在需要填充的封闭区域前设置</td></tr><tr><td>.end_fill()</td><td>在需要填充的封闭区域后设置</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制一个圆</span></span><br><span class="line"><span class="comment"># 默认会填充会依附于t.color()</span></span><br><span class="line"><span class="comment"># 单独设置使用t.fillcolor()</span></span><br><span class="line">t.fillcolor(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">t.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line">t.end_fill()    <span class="comment"># 结束填充</span></span><br></pre></td></tr></table></figure><h3 id="3-窗体设置"><a href="#3-窗体设置" class="headerlink" title="3. 窗体设置"></a>3. 窗体设置</h3><blockquote><p>绘图部分都设置完毕了，那么运行的窗体、背景啥的能修改吗？</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.setup(w, h)</td><td>设置窗体的大小</td></tr><tr><td>.title(s)</td><td>设置窗体的标题</td></tr><tr><td>.Screen().bgcolor(c)</td><td>设置屏幕的背景颜色</td></tr><tr><td>.bgcolor(c)</td><td>同上</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置窗体大小</span></span><br><span class="line">t.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"><span class="comment"># 设置窗体标题</span></span><br><span class="line">t.title(<span class="string">&quot;品味穿搭&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取屏幕设置变量</span></span><br><span class="line">s = t.Screen()</span><br><span class="line"><span class="comment"># 背景颜色</span></span><br><span class="line">s.bgcolor(<span class="string">&quot;pink&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="27-同心圆-坐标与定位"><a href="#27-同心圆-坐标与定位" class="headerlink" title="27. 同心圆.坐标与定位"></a>27. 同心圆.坐标与定位</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-坐标的概念"><a href="#1-坐标的概念" class="headerlink" title="1. 坐标的概念"></a>1. 坐标的概念</h3><blockquote><p>默认情况下，海龟绘图在屏幕中间开始。我们可以设置对应坐标让其在指定位置绘制</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.goto(x, y)</td><td>设置海龟箭头的位置，默认0, 0</td></tr><tr><td>.setx(n)</td><td>设置海龟箭头的x位置</td></tr><tr><td>.sety(n)</td><td>设置海龟箭头的y位置</td></tr><tr><td>.home()</td><td>回到初始位置，并设置初始方向</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将坐标定位至x:0,y:0</span></span><br><span class="line">t.goto(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将坐标y轴上移100位置</span></span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">100</span>)<span class="comment"># 或t.sety(100)</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><ul><li>虽然，我们绘制出了同心圆，但暴露了两个问题：<ul><li>问题一：同心圆没有按照中心点绘制；</li><li>问题二：当绘制第二个圆时，笔头划过路过的区域，并没有抬笔；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照中心点绘制圆</span></span><br><span class="line">n = t.numinput(<span class="string">&quot;同心圆&quot;</span>, <span class="string">&quot;请输入外围圆的半径：&quot;</span>)</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span> - n)</span><br><span class="line">t.circle(n)</span><br><span class="line"></span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span> - n / <span class="number">2</span>)</span><br><span class="line">t.circle(n / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="2-抬笔与落笔"><a href="#2-抬笔与落笔" class="headerlink" title="2. 抬笔与落笔"></a>2. 抬笔与落笔</h3><blockquote><p>每次当笔头要位移绘制时，我们需要将笔头抬起，然后再绘制处再落笔即可</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.penup()</td><td>设置画笔抬起，此时无法绘制内容，简写为：.up()</td></tr><tr><td>.pendown()</td><td>设置画笔落下，此时可以绘制内容，简写为：.down()</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 起始先抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制时落笔</span></span><br><span class="line">t.pendown()</span><br></pre></td></tr></table></figure><h1 id="28-到此一游-点和文字"><a href="#28-到此一游-点和文字" class="headerlink" title="28. 到此一游.点和文字"></a>28. 到此一游.点和文字</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-坐标设计"><a href="#1-坐标设计" class="headerlink" title="1. 坐标设计"></a>1. 坐标设计</h3><blockquote><p>想设计一个x轴和y轴的坐标图形，先利用已有的知识绘制出来</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">50</span>,<span class="number">0</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, -<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br></pre></td></tr></table></figure><ul><li>上面的代码有两个问题：<ul><li>我们可以通过设置箭头的方向，而不是left拐弯；</li><li>箭头只能保持一个，需要使用驻留的功能保持；</li></ul></li></ul><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.seth(a)</td><td>设置海龟箭头方向，</td></tr><tr><td></td><td>右（0）、上（90）、左（180）、下（-90， 270）</td></tr><tr><td>.stamp()</td><td>将箭头标记驻留在绘制结尾</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># y轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, -<span class="number">50</span>)</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line">t.stamp()</span><br></pre></td></tr></table></figure><h3 id="2-点和文字"><a href="#2-点和文字" class="headerlink" title="2. 点和文字"></a>2. 点和文字</h3><blockquote><p>在坐标（0, 0）位置设置一个中心点，并在点写上文字</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.dot(s[, c])</td><td>绘制一个点，s为大小，c可选颜色</td></tr><tr><td>.write(s[, move, align, font])</td><td>写入文字，s是文字，move是true或false，设置画笔初始位置</td></tr><tr><td></td><td>align是方向：left（左）、right（右）、center（中）</td></tr><tr><td></td><td>font是字体：”宋体”, 20, “bold”，字体是本机的字体，20是字体大小</td></tr><tr><td></td><td>bold是加粗，另外选项：noraml（正常）、italic（倾斜）</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">50</span>,<span class="number">0</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line">t.stamp()</span><br><span class="line">t.write(<span class="string">&quot;x&quot;</span>, align=<span class="string">&quot;left&quot;</span>, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">12</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># y轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, -<span class="number">50</span>)</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line">t.stamp()</span><br><span class="line">t.write(<span class="string">&quot;y&quot;</span>, align=<span class="string">&quot;right&quot;</span>, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">12</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中心点</span></span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.dot(<span class="number">10</span>)</span><br><span class="line">t.write(<span class="string">&quot;(0,0)&quot;</span>, align=<span class="string">&quot;left&quot;</span>, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">12</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏箭头</span></span><br><span class="line">t.hideturtle()</span><br></pre></td></tr></table></figure><h1 id="29-不想再次重复-函数"><a href="#29-不想再次重复-函数" class="headerlink" title="29. 不想再次重复.函数"></a>29. 不想再次重复.函数</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-函数的概念"><a href="#1-函数的概念" class="headerlink" title="1. 函数的概念"></a>1. 函数的概念</h3><blockquote><p>我们这里所说的函数有两个意思：<strong>系统内置函数</strong>和<strong>自定义函数</strong></p></blockquote><ul><li>具体区别如下：<ul><li>系统内置函数：之前学习的print()、input()等 <strong>固定英文+括号</strong> 的语法格式，并有独有的效果；</li><li>自定义函数：今天即将要学习的自己创建的 <strong>自定义英文+括号</strong> 的语法格式，效果是自己的创意和算法；</li><li>那么，先看一个需求：我要在屏幕左上、左下、右上、右下绘制四个圆：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入海龟库</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加速</span></span><br><span class="line">t.speed(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去左上角</span></span><br><span class="line">t.goto(-<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去右上角</span></span><br><span class="line">t.goto(<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去左下角</span></span><br><span class="line">t.goto(-<span class="number">150</span>, -<span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去右下角</span></span><br><span class="line">t.goto(<span class="number">150</span>, -<span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从上面的例子中发现，非常简单的圆，只不过要重复四次，就花费了大量的代码片段，带来了很多问题：<ul><li>代码重复度高，可读性差，查询修改代码会错位；</li><li>后期维护困难，如需升级，重复的地方都要修改；</li></ul></li></ul><h3 id="2-无参数的函数"><a href="#2-无参数的函数" class="headerlink" title="2. 无参数的函数"></a>2. 无参数的函数</h3><blockquote><p>函数的括号部分是用于传递参数的，如果留空那就是无参数的函数</p></blockquote><ul><li>语法格式：<ul><li>创建函数：<strong>def</strong> 自定义函数名():</li><li>调用函数：自定义函数名()</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个函数，关键字def开头</span></span><br><span class="line"><span class="comment"># 注意1：和if语句一样，创建函数结尾加上冒号</span></span><br><span class="line"><span class="comment"># 注意2：和if语句一样，在函数体内必须有Tab键间隔</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是函数！&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用多次函数</span></span><br><span class="line">hello()</span><br><span class="line">hello()</span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><h3 id="3-有参数的函数"><a href="#3-有参数的函数" class="headerlink" title="3. 有参数的函数"></a>3. 有参数的函数</h3><blockquote><p>函数的括号部分是用于传递参数的，如果留空那就是无参数的函数</p></blockquote><ul><li>语法格式：<ul><li>创建函数：<strong>def</strong> 自定义函数名([参数1, 参数2, 参数3……]):</li><li>调用函数：自定义函数名()</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的参数，本质上就是变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">name, age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我的名字叫：%s, 年龄：%d&quot;</span>%(name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用传递不同参数</span></span><br><span class="line">info(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>)</span><br><span class="line">info(<span class="string">&quot;李四&quot;</span>, <span class="number">11</span>)</span><br><span class="line">info(<span class="string">&quot;王二狗&quot;</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><ul><li>此时，我们再回到之前重复绘制圆的问题，用函数去解决它：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数，解决了后期升级和可读性问题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dc</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="comment"># 抬笔</span></span><br><span class="line">    t.penup()</span><br><span class="line">    <span class="comment"># 去左上角</span></span><br><span class="line">    t.goto(x, y)</span><br><span class="line">    <span class="comment"># 落笔</span></span><br><span class="line">    t.pendown()</span><br><span class="line">    <span class="comment"># 画圆</span></span><br><span class="line">    t.circle(<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 左上</span></span><br><span class="line">dc(-<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 右上</span></span><br><span class="line">dc(<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 左下</span></span><br><span class="line">dc(-<span class="number">150</span>, -<span class="number">150</span>)</span><br><span class="line"><span class="comment"># 右下</span></span><br><span class="line">dc(<span class="number">150</span>, -<span class="number">150</span>)</span><br></pre></td></tr></table></figure><h1 id="30-来了都收-传参技巧"><a href="#30-来了都收-传参技巧" class="headerlink" title="30. 来了都收.传参技巧"></a>30. 来了都收.传参技巧</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-参数传递"><a href="#1-参数传递" class="headerlink" title="1. 参数传递"></a>1. 参数传递</h3><blockquote><p>除了无参和固定参数外，还有带默认值的参数以及不确定个数的参数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带默认值的参数</span></span><br><span class="line"><span class="comment"># 注意1：不带默认值的参数是必须传递的，否则报错</span></span><br><span class="line"><span class="comment"># 注意2：带默认值的，如果传递了则覆盖默认值，反之则启用默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params"><span class="built_in">id</span>, name, gender=<span class="string">&quot;未知&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>, name, gender)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment">#info(1)     # 报错</span></span><br><span class="line"><span class="comment"># 启用默认值</span></span><br><span class="line">info(<span class="number">1</span>, <span class="string">&quot;王二狗&quot;</span>)</span><br><span class="line"><span class="comment"># 覆盖默认值</span></span><br><span class="line">info(<span class="number">1</span>, <span class="string">&quot;王二狗&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-不确定参数"><a href="#2-不确定参数" class="headerlink" title="2. 不确定参数"></a>2. 不确定参数</h3><blockquote><p>什么叫做不确定参数？传递参数的个数不确定，有多有少，从而设计的传参方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不固定的传参</span></span><br><span class="line"><span class="comment"># 需求说明：给同时进入大厅的客户发表问候</span></span><br><span class="line"><span class="comment"># 例如：1.张三，欢迎光临！2. 张三，李四，王二狗，欢迎光临！</span></span><br><span class="line"><span class="comment"># 注意1：传递的参数名和普通参数一样，自定义，args单词为多组参数的意思</span></span><br><span class="line"><span class="comment"># 注意2：参数左边有一个 * 号，表示我是不固定个数的传参</span></span><br><span class="line"><span class="comment"># 注意3：不管传递了多少个参数，都将形成一个 turple（元祖）类型，可遍历</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot;，&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎光临！&quot;</span>)</span><br><span class="line">    </span><br><span class="line">hello()    </span><br><span class="line">hello(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">hello(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王二狗&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>如果想要在不固定参数的使用上，再添加一个固定参数，那需要在左边传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">info, *args</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot;，&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(info)</span><br><span class="line">    </span><br><span class="line">hello(<span class="string">&quot;恭喜发财&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王二狗&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>在不固定传参中，还有一种**args的传参方式，原理和上面一样，只是采用了key:value模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># **args模式，特别适合key:value形式的数据传递</span></span><br><span class="line"><span class="comment"># 注意1：这个参数会返回一个 dict 字典数据</span></span><br><span class="line"><span class="comment"># 注意2：调用的时候，通过赋值传递即可</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>(<span class="params">**args</span>):</span><br><span class="line">    <span class="comment">#print(type(args))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args.items():</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">student(<span class="built_in">id</span>=<span class="string">&quot;A1&quot;</span>, name=<span class="string">&quot;张三&quot;</span>, age=<span class="number">11</span>)</span><br><span class="line">student(<span class="built_in">id</span>=<span class="string">&quot;A2&quot;</span>, name=<span class="string">&quot;李四&quot;</span>, age=<span class="number">10</span>)</span><br><span class="line">student(<span class="built_in">id</span>=<span class="string">&quot;A3&quot;</span>, name=<span class="string">&quot;王二狗&quot;</span>, age=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h1 id="31-反馈不反馈-返回值"><a href="#31-反馈不反馈-返回值" class="headerlink" title="31. 反馈不反馈.返回值"></a>31. 反馈不反馈.返回值</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-无返回值函数"><a href="#1-无返回值函数" class="headerlink" title="1. 无返回值函数"></a>1. 无返回值函数</h3><blockquote><p>之前我们自定义的函数都是无返回值的函数，即：调用函数后，直接执行所有代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无返回值函数</span></span><br><span class="line"><span class="comment"># 注意1：无返回值函数权限太高，自行执行需求，包括格式方法等</span></span><br><span class="line"><span class="comment"># 注意2：调用方只能调用和传参，没有任何其它权限</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%dx%d=%d&quot;</span>%(a,b,a*b))</span><br><span class="line">    </span><br><span class="line">hello(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">hello(<span class="number">30</span>,<span class="number">50</span>)</span><br></pre></td></tr></table></figure><ul><li>我们希望函数能给调用者更多的权限，让调用者控制更多的需求和流程，可采用返回值模式</li></ul><h3 id="2-有返回值函数"><a href="#2-有返回值函数" class="headerlink" title="2. 有返回值函数"></a>2. 有返回值函数</h3><blockquote><p>通过函数计算得到的结果后，不用去处理它的流程和显示格式，返回给调用方处理</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有返回值函数</span></span><br><span class="line"><span class="comment"># 注意1：通过return关键字将结果返回出来</span></span><br><span class="line"><span class="comment"># 注意2：由于函数是返回结果，直接调用是无任何输出的</span></span><br><span class="line"><span class="comment"># 注意3：可以把有返回值的函数当前变量处理，输出或判断等</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(info(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%dx%d=%d&quot;</span>%(<span class="number">10</span>,<span class="number">20</span>,info(<span class="number">10</span>,<span class="number">20</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对函数返回值进行判断</span></span><br><span class="line"><span class="keyword">if</span> info(<span class="number">10</span>,<span class="number">20</span>) &gt; <span class="number">150</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结果正确！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="32-相邻不相识-全局与局部"><a href="#32-相邻不相识-全局与局部" class="headerlink" title="32. 相邻不相识.全局与局部"></a>32. 相邻不相识.全局与局部</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-局部变量"><a href="#1-局部变量" class="headerlink" title="1. 局部变量"></a>1. 局部变量</h3><blockquote><p>有没有考虑过一个问题：函数体内声明的变量会不会被外部干涉？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的num 叫全局变量</span></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在函数体内声明变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment"># 这里的num 叫局部变量</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> x + y + num</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里的返回值中，参与运算的是局部变量num    </span></span><br><span class="line"><span class="built_in">print</span>(hello(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 注意：这里的num一定是全局 num，局部num出了函数体就看不见了</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><ul><li>归纳以下几点：<ul><li>局部变量只能在自己的函数体内参与操作，出了函数体就不认识了；</li><li>全局变量就是在函数体外部声明的变量，它无法改变函数体声明的同名变量；</li><li>局部变量比全局变量的优先度高，它会覆盖全局同名变量在函数体内的运行；</li><li>如果函数体内不存在同名的局部变量声明，那么函数体内的变量将由全局变量接管；</li></ul></li></ul><h3 id="2-全局变量"><a href="#2-全局变量" class="headerlink" title="2. 全局变量"></a>2. 全局变量</h3><blockquote><p>全局变量除了在函数体外直接定义，也可以在函数体内声明</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    <span class="comment"># 在函数体内创建一个全局变量</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在未调用时，x无法访问</span></span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在调用时，x可以访问，y是局部变量无法访问</span></span><br><span class="line">info()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#print(y)</span></span><br></pre></td></tr></table></figure><ul><li>归纳以下几点：<ul><li>全局函数在函数体需要定义为：global x，赋值需要单独进行，不可直接赋值；</li><li>global 关键字声明，必须在函数体的第一行；</li><li>函数体内的全局变量，需要调用过函数才能实现声明可见；</li></ul></li></ul><ul><li>利用全局变量的特性，实现一个调用关系的小例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用关系</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">your</span>():</span><br><span class="line">    <span class="built_in">print</span>(name, age)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my</span>():</span><br><span class="line">    <span class="keyword">global</span> name</span><br><span class="line">    name = <span class="string">&quot;王二狗&quot;</span></span><br><span class="line">    age = <span class="number">12</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 外部初始化全局变量name和age</span></span><br><span class="line">name = <span class="string">&quot;张三&quot;</span>     </span><br><span class="line">age = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，调用your()，直接被全局变量接管</span></span><br><span class="line">your()</span><br><span class="line"><span class="comment"># 其次，调用my()，会激活全局变量name和局部变量age</span></span><br><span class="line"><span class="comment"># 此时，name被新的全局变量覆盖，而age只是局部，无法接管另一个函数的同名变量</span></span><br><span class="line">my()</span><br><span class="line">your() </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="33-模块化处理-函数分组"><a href="#33-模块化处理-函数分组" class="headerlink" title="33. 模块化处理.函数分组"></a>33. 模块化处理.函数分组</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-函数分组"><a href="#1-函数分组" class="headerlink" title="1. 函数分组"></a>1. 函数分组</h3><blockquote><p>函数太多怎么办？将函数独立里成文件用库的方式import导入，实现模块化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加法函数，addition.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块其实就是引入库，比如import turtle</span></span><br><span class="line"><span class="comment"># 本节课主要是学会如何自己创建可以import的库</span></span><br><span class="line"><span class="comment"># 将函数存放到单独文件中，通过import调用</span></span><br><span class="line"><span class="comment"># import 导入同文件夹下的.py文件名</span></span><br><span class="line"><span class="keyword">import</span> addition <span class="keyword">as</span> add</span><br><span class="line"><span class="built_in">print</span>(add.<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h3 id="2-from…import"><a href="#2-from…import" class="headerlink" title="2. from…import"></a>2. from…import</h3><blockquote><p>引入模块库时，可以使用from…import可将指定方法导入模块中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from...import只是将库中某一个或几个方法引入近来</span></span><br><span class="line"><span class="comment"># 多个方法，用逗号个开  circle,fd,bk</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> circle</span><br><span class="line"><span class="comment"># 如果想将所有的turtle引入近来，直接import *</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add.<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 无法执行</span></span><br><span class="line"><span class="comment">#turtle.forward(100)</span></span><br><span class="line"><span class="comment"># 直接使用方法，当成函数语法使用</span></span><br><span class="line">circle(<span class="number">100</span>)</span><br><span class="line">fd(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="34-反复调用-递归函数"><a href="#34-反复调用-递归函数" class="headerlink" title="34. 反复调用.递归函数"></a>34. 反复调用.递归函数</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-简单递归"><a href="#1-简单递归" class="headerlink" title="1. 简单递归"></a>1. 简单递归</h3><blockquote><p>什么是递归，即：重复的执行自身函数，从而解决某些问题</p></blockquote><ul><li>需求分析：阶乘问题<ul><li>输入一个数n：比如5，求出1-n之间的阶乘：1x2x3x4x5</li><li>具体阶乘公式为：F(n) = n × F(n-1)</li></ul></li></ul><ul><li>思路分析：从后向前乘<ul><li>假设n为5，利用公式：n × F(n-1)</li><li>第一轮：5 x (5-1)， 20</li><li>第二轮：20  x (4 - 1) ， 60</li><li>第三轮：60 x (3-1)， 120</li><li>第四轮：120 x (2-1)，120</li><li>第五轮：判断1退出</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阶乘递归函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 当n为1时，就需要退出递归不再调用</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>: </span><br><span class="line">        <span class="comment"># return 除了返回还有类似break退出的作用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">#print(123)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 5 * F(5-1)</span></span><br><span class="line">        <span class="comment"># 5 * 4 * F(4-1)</span></span><br><span class="line">        <span class="comment"># 5 * 4 * 3 * F(2-1)</span></span><br><span class="line">        <span class="comment"># 5 * 4 * 3 * 2 * 1</span></span><br><span class="line">        <span class="keyword">return</span> n * F(n - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(fn(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="2-斐波那契数列"><a href="#2-斐波那契数列" class="headerlink" title="2. 斐波那契数列"></a>2. 斐波那契数列</h3><blockquote><p>提升一点难度，尝试用递归来算出第20位的经典数列：斐波那契数列</p></blockquote><ul><li>数列公式分析：<ul><li><strong>F(n)=F(n-1)+F(n-2)</strong></li><li>1、1、2、3、5、8、13、21….</li><li>从第三项开始，每一项都是前两项的和</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 前两项固定为1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 套用递归</span></span><br><span class="line">    <span class="comment"># 如果n=3，F(2) + F(1) = 2</span></span><br><span class="line">    <span class="comment"># 如果n=5, F(4) + F(3) = 3 + 2 = 5</span></span><br><span class="line">    <span class="comment"># 如果n=8，F(7) + F(6) = 5 + 3 + 5 + 5 + 2 + 1 = 21</span></span><br><span class="line">    <span class="keyword">return</span> F(n-<span class="number">1</span>) + F(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(F(<span class="number">20</span>))</span><br></pre></td></tr></table></figure><h1 id="35-数学函数及Math库"><a href="#35-数学函数及Math库" class="headerlink" title="35. 数学函数及Math库"></a>35. 数学函数及Math库</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-数学函数"><a href="#1-数学函数" class="headerlink" title="1. 数学函数"></a>1. 数学函数</h3><blockquote><p>头疼的数学计算，提供了不少快捷的函数方便我们直接使用</p></blockquote><div class="table-container"><table><thead><tr><th>函数名</th><th>返回值说明</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>round(x[, n])</td><td>返回x四舍五入的值，n可选，保留小数的位数</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对值，不管正负，都取正</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入，遇5进位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.55</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.55</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.44</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.44</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="2-math数学库"><a href="#2-math数学库" class="headerlink" title="2. math数学库"></a>2. math数学库</h3><blockquote><p>除了上述直接作用的函数外，math库也提供了更多的数学方法和属性</p></blockquote><div class="table-container"><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.ceil(x)</td><td>返回x向上取整的值</td></tr><tr><td>.floor(x[, n])</td><td>返回x向下取整的值</td></tr><tr><td>.fsum(list)</td><td>返回list中所有元素的和</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>属性名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.pi</td><td>返回圆周率</td></tr><tr><td>.e</td><td>返回自然常数</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对小数向上取整，进位取整</span></span><br><span class="line"><span class="built_in">print</span>(m.ceil(<span class="number">2.55</span>))</span><br><span class="line"><span class="built_in">print</span>(m.ceil(<span class="number">2.44</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对小数向下取整，截断取整</span></span><br><span class="line"><span class="built_in">print</span>(m.floor(<span class="number">2.55</span>))</span><br><span class="line"><span class="built_in">print</span>(m.floor(<span class="number">2.44</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表中所有元素的和</span></span><br><span class="line"><span class="built_in">print</span>(m.fsum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取pi，圆周率的值</span></span><br><span class="line"><span class="built_in">print</span>(m.pi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取e，自然常数，无限不循环小数</span></span><br><span class="line"><span class="built_in">print</span>(m.e)</span><br></pre></td></tr></table></figure><h1 id="36-实训-璀璨星空"><a href="#36-实训-璀璨星空" class="headerlink" title="36. 实训.璀璨星空"></a>36. 实训.璀璨星空</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-实战内容"><a href="#1-实战内容" class="headerlink" title="1. 实战内容"></a>1. 实战内容</h3><blockquote><p>利用随机、海龟图、函数等知识点，绘制一张包含很多个五角星的星空</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入库</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制速度</span></span><br><span class="line">t.speed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗体大小</span></span><br><span class="line">t.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 晚间天空SlateBlue4</span></span><br><span class="line">t.bgcolor(<span class="string">&quot;SlateBlue4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 五角星函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawStar</span>(<span class="params">x, y, color, size, angle</span>):</span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(x,y)</span><br><span class="line">    t.pendown()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置颜色</span></span><br><span class="line">    t.color(color)</span><br><span class="line">    <span class="comment"># 设置角度</span></span><br><span class="line">    t.left(angle)</span><br><span class="line">    <span class="comment"># 五角星绘制</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t.forward(size)</span><br><span class="line">        t.right(<span class="number">144</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 循环100次</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 随机坐标</span></span><br><span class="line">    x = r.randint(-<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">    y = r.randint(-<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机颜色</span></span><br><span class="line">    color = r.choice([<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;maroon&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机大小</span></span><br><span class="line">    size = r.randint(<span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机角度</span></span><br><span class="line">    angle = r.randint(<span class="number">0</span>, <span class="number">360</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用五角星函数</span></span><br><span class="line">    drawStar(x, y, color, size, angle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制完毕</span></span><br><span class="line">t.done()</span><br><span class="line">t.hideturtle()</span><br></pre></td></tr></table></figure><h1 id="37-教培-亲子-学习路线"><a href="#37-教培-亲子-学习路线" class="headerlink" title="37. 教培.亲子.学习路线"></a>37. 教培.亲子.学习路线</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-学习路线"><a href="#1-学习路线" class="headerlink" title="1.  学习路线"></a>1.  学习路线</h3><blockquote><p>36课语法基础已经结束了！下面就谈一谈教培老师和亲子家长如何规划学习</p></blockquote><ul><li>路线规划一（一般小学生）：<ul><li>对于能力一般的学员，36课就是他们的归宿，不用继续往下学；</li><li>36课之后，进入 <strong>百题速刷（数理解题）</strong>、<strong>海龟绘图（竞赛操作题）</strong>两个篇章；</li><li>36课在1.5-2小时的线下课，可以填充15节左右。加上百题速刷和海龟绘图，可以填充30多节；</li><li>也就是说，这条路线完美解决48节一年课程；然后可以考虑考级。。。</li><li>不太建议第一年比赛，因为选择题部分，涉及到算法、数据结构等内容。。。</li><li>当然，由于操作题比较合理，而不太正规的赛事的理论题都是拿来主义，自己也不懂。。</li><li>大概率：给你一个题库，背一背就可以了。然后主攻操作题。</li><li>大部分学生其实无法进入更高阶段的学习，那继续 用Python <strong>数理解题</strong> 和 <strong>海龟绘图</strong> 运作第二年；</li></ul></li></ul><ul><li>路线规划二（优质小学生）：<ul><li>从37课后，可以继续学完，到最后。也可以按照路线一，然后再37课往后；</li><li>而本套课程学完之后，解题 和 绘图 也完毕了，考级也考了，比赛也比了；</li><li>后续就是 <strong>软件开发</strong> 和 <strong>游戏开发</strong> 的各种扩展主题课，直至到中学阶段；</li></ul></li></ul><ul><li>路线规划三（优质中学生）：<ul><li>优质小学生开始进化优质中学生，更强的数理能力和逻辑能力，此时升级到C++信奥赛体系；</li><li>这里就开始规划一说的，正规赛事的教学和集训，开始涉及到：<ul><li>数据结构（链表、堆栈、队列、二叉树等等）</li><li>图论（邻接矩阵、无相连通图、节点等）</li><li>算法（贪心、递推、二分、枚举、高精度、各种排序等等）</li><li>初等数学（代数、平面几何、数论、组合数学等）</li></ul></li><li>当然，这是后话！！！</li></ul></li></ul><h1 id="38-做个小软件-Tkinter入门"><a href="#38-做个小软件-Tkinter入门" class="headerlink" title="38. 做个小软件.Tkinter入门"></a>38. 做个小软件.Tkinter入门</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-Tkinter初步"><a href="#1-Tkinter初步" class="headerlink" title="1. Tkinter初步"></a>1. Tkinter初步</h3><blockquote><p>Tkinter是一款Python内置的GUI软件界面开发库，用这个库可以做软件</p></blockquote><ul><li><p>学习这款库，有以下注意点：</p><ul><li>由于是针对小学生5年级+，不按成人那种手册式教学</li><li>也就是说：用到哪里，就只讲哪里，并且不涉及原理</li><li>如果对软件开发感兴趣，后续独立主题课会开设项目式课程</li><li><strong>Tkinter和Pygame只花5-6节蜻蜓点水一下，做个了解，学个概念，跟做就行</strong></li><li><strong>系统性和软游项目课程会做独立课程，基础课中的内容学完啥也做不了的</strong></li><li>手册地址：<a href="https://docs.python.org/zh-cn/3/library/tk.html">https://docs.python.org/zh-cn/3/library/tk.html</a></li></ul></li></ul><ul><li>tkinter库旗下的方法：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Tk()</td><td>生成窗体的方法，返回值是一个对象（点出万物的变量），设置当前窗体</td></tr><tr><td style="text-align:left">.Label()</td><td>生成一个文字标签，返回值同上，设置当前文本</td></tr><tr><td style="text-align:left">.mainloop()</td><td>循环窗体，不断刷新窗体内容</td></tr></tbody></table></div><p>.Tk()方法下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.geometry()</td><td>窗体的大小，长高坐标，具体传参看后续代码</td></tr><tr><td style="text-align:left">.title()</td><td>窗体的标题，参数即标题名称</td></tr></tbody></table></div><p>.Label()方法下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.pack()</td><td>将文本内容定位到指定的窗体上，细节看后续代码</td></tr></tbody></table></div><h3 id="2-代码详解"><a href="#2-代码详解" class="headerlink" title="2. 代码详解"></a>2. 代码详解</h3><blockquote><p>通过以上的知识点，完成一个包含文本的窗体</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入GUI库 tkinter</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="comment"># 库下的.Tk()方法，称为窗体组件，可以生成一个窗口</span></span><br><span class="line"><span class="comment"># 注意1：Tk中的T是大写，区分大小写</span></span><br><span class="line"><span class="comment"># 注意2：方法返回一个可以点出万物的变量（是对象，还没学这概念）</span></span><br><span class="line"><span class="comment"># 注意3：可以通过print(type(t))来查看类型</span></span><br><span class="line">t = tk.Tk()</span><br><span class="line"><span class="comment"># 设置窗体大小，800x600是长和高，[400是x轴，200是y轴]</span></span><br><span class="line">t.geometry(<span class="string">&quot;800x600&quot;</span>)</span><br><span class="line"><span class="comment">#t.geometry(&quot;800x600+400+200&quot;)</span></span><br><span class="line"><span class="comment"># 设置窗体标题</span></span><br><span class="line">t.title(<span class="string">&quot;tkinter 初步&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入一个Label()文字组件</span></span><br><span class="line"><span class="comment"># 注意1：Label(t[,option])方法组件区分大小写</span></span><br><span class="line"><span class="comment"># 注意2：参数t是必须，text是文字内容</span></span><br><span class="line">lab1 = tk.Label(t, text=<span class="string">&quot;我的第一个tk程序！&quot;</span>)</span><br><span class="line"><span class="comment"># 入驻窗体</span></span><br><span class="line">lab1.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环，让窗体内交互内容不断刷新</span></span><br><span class="line"><span class="comment"># 但是，由于我们的编辑器自带了轮询，所以不加也在刷新</span></span><br><span class="line"><span class="comment"># 可是，如果脱离编辑器环境，就变成静态的死窗口了</span></span><br><span class="line"><span class="comment"># 结论，还是加上去</span></span><br><span class="line">tk.mainloop()</span><br></pre></td></tr></table></figure><h1 id="39-交互-按钮和文本框"><a href="#39-交互-按钮和文本框" class="headerlink" title="39. 交互.按钮和文本框"></a>39. 交互.按钮和文本框</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-按钮和文本框"><a href="#1-按钮和文本框" class="headerlink" title="1. 按钮和文本框"></a>1. 按钮和文本框</h3><blockquote><p>按钮<strong>.Button()</strong>组件方法和单行文本框<strong>.Entry()</strong>组件方法的使用</p></blockquote><ul><li>tkinter库旗下的方法：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Button()</td><td>生成一个按钮，参数看后续代码</td></tr><tr><td style="text-align:left">.Entry()</td><td>生成一个单行文本框，参数看后续代码</td></tr></tbody></table></div><p>.Entry()旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.get()</td><td>可以获取单行文本框的值</td></tr><tr><td style="text-align:left">.delete()</td><td>可以删除单行文本框的值，清空直接范围：0-“end”</td></tr></tbody></table></div><p>.Label()旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.config()</td><td>可以修改文本内的值</td></tr></tbody></table></div><ul><li>如何实现按钮点击触发：<ul><li>在Button()按钮内设置时，有一个属性：command</li><li>将一个函数fn赋值给command属性，即可完成点击按钮触发函数</li></ul></li></ul><h3 id="2-代码详解-1"><a href="#2-代码详解-1" class="headerlink" title="2. 代码详解"></a>2. 代码详解</h3><blockquote><p>通过以上的知识点，构建一个按钮和输入框，并实现交互</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文本框</span></span><br><span class="line"><span class="comment"># 注意1：.Entry()组件方法，区分大小写</span></span><br><span class="line">ent1 = tk.Entry(t, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">20</span>))</span><br><span class="line">ent1.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    <span class="comment">#print(&quot;感谢点击！&quot;)</span></span><br><span class="line">    <span class="comment"># 获取文本框的值</span></span><br><span class="line">    res = ent1.get()</span><br><span class="line">    <span class="comment"># 改变文本标签的值</span></span><br><span class="line">    lab1.config(text=res)</span><br><span class="line">    <span class="comment"># 清空文本框</span></span><br><span class="line">    <span class="comment"># 0表示第一个字符，&quot;end&quot;表示到最后一个字符</span></span><br><span class="line">    ent1.delete(<span class="number">0</span>, <span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个按钮</span></span><br><span class="line"><span class="comment"># 注意1：.Button()组件方法，区分大小写</span></span><br><span class="line"><span class="comment"># 注意2：command是交互属性，可以调用自定义函数</span></span><br><span class="line">but1 = tk.Button(t, text=<span class="string">&quot;确认&quot;</span>, command=fn)</span><br><span class="line">but1.pack()</span><br></pre></td></tr></table></figure><h1 id="40-合法性-验证和弹窗"><a href="#40-合法性-验证和弹窗" class="headerlink" title="40. 合法性.验证和弹窗"></a>40. 合法性.验证和弹窗</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-验证数据"><a href="#1-验证数据" class="headerlink" title="1. 验证数据"></a>1. 验证数据</h3><blockquote><p>可以通过以往的只是了判断输入框的数据是否符合要求</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断res是否为空，当然可以判断各种其它验证</span></span><br><span class="line"><span class="keyword">if</span> res == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据不可以为空！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lab1.config(text=res)</span><br><span class="line">    ent1.delete(<span class="number">0</span>, <span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-弹窗组件"><a href="#2-弹窗组件" class="headerlink" title="2. 弹窗组件"></a>2. 弹窗组件</h3><blockquote><p>弹窗组件是一个需要引入的独立库，通过这个组件可以实现弹窗效果</p></blockquote><ul><li>tkinter.messagebox库旗下的方法：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.showinfo()</td><td>提示框的类型设定为：普通提示</td></tr><tr><td style="text-align:left">.showwarning()</td><td>提示框的类型设定为：警告提示</td></tr></tbody></table></div><p>.showinfo()和showwarning()方法旗下的属性：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td>提示的标题</td></tr><tr><td style="text-align:left">message</td><td>提示内容的详情文本</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入信息提示框</span></span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> tmb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断res是否为空，当然可以判断各种其它验证</span></span><br><span class="line"><span class="keyword">if</span> res == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="comment">#print(&quot;数据不可以为空！&quot;)</span></span><br><span class="line">    <span class="comment"># 提示组件有集中类别：showinfo(普通消息)、showwarning(警告消息)等...</span></span><br><span class="line">    tmb.showwarning(title=<span class="string">&quot;警告信息&quot;</span>, message=<span class="string">&quot;输入框不可以为空！&quot;</span>)</span><br><span class="line">    <span class="comment"># 让输入框获得焦点</span></span><br><span class="line">    ent1.focus()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lab1.config(text=res)</span><br><span class="line">    ent1.delete(<span class="number">0</span>, <span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="41-载入天空-绘图组件"><a href="#41-载入天空-绘图组件" class="headerlink" title="41. 载入天空.绘图组件"></a>41. 载入天空.绘图组件</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-绘制天空"><a href="#1-绘制天空" class="headerlink" title="1. 绘制天空"></a>1. 绘制天空</h3><blockquote><p>绘图组件：Canvas()提供了一些简单的绘图功能</p></blockquote><ul><li>tkinter库旗下的方法：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Canvas()</td><td>在窗体上绘制图形，可以设置bg、width和height</td></tr></tbody></table></div><p>.Canvas()方法旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.create_oval(x1,y1,x2,y2[,options])</td><td>创建一个圆的图形，前四个参数为左上角和右下角坐标位置</td></tr><tr><td style="text-align:left">.move(oval, moveX, moveY)</td><td>将绘图区的一个图形，移动相应坐标的数值</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入绘图区域</span></span><br><span class="line">cv = tk.Canvas(t, bg=<span class="string">&quot;lightblue&quot;</span>, width=<span class="string">&quot;800&quot;</span>, height=<span class="string">&quot;300&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制一个橙红太阳</span></span><br><span class="line">oval = cv.create_oval(<span class="number">450</span>, <span class="number">150</span>, <span class="number">350</span>, <span class="number">50</span>, fill=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">cv.pack()</span><br></pre></td></tr></table></figure><p>.Tk()方法旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.resizeable(x,y)</td><td>设置窗体的x和y是否允许拖动，都设置False，即无法最大化</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移动太阳</span></span><br><span class="line">cv.move(oval, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法调整大小，x和y轴</span></span><br><span class="line">t.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="42-下拉的魅力-菜单组件"><a href="#42-下拉的魅力-菜单组件" class="headerlink" title="42. 下拉的魅力.菜单组件"></a>42. 下拉的魅力.菜单组件</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-设计菜单"><a href="#1-设计菜单" class="headerlink" title="1. 设计菜单"></a>1. 设计菜单</h3><blockquote><p>软件有一个重要的功能，就是菜单系统：Menu()组件可以实现</p></blockquote><p>tkinter库旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Menu()</td><td>创建一个菜单组</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建第一个菜单容器，用于存放具体的菜单组</span></span><br><span class="line">one = tk.Menu(t)</span><br><span class="line"><span class="comment"># 再创建一个菜单组，内嵌到one菜单容器里</span></span><br><span class="line"><span class="comment"># 注意1：第一参数，内嵌到哪个菜单容器</span></span><br><span class="line"><span class="comment"># 注意2：tearoff只有两个值1和0，1表示可独立分离，0不可以</span></span><br><span class="line">file = tk.Menu(one, tearoff=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>.Menu()旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.add_cascade()</td><td>在指定的菜单组中添加一个菜单项</td></tr><tr><td style="text-align:left">.add_separator()</td><td>创建一条水平线</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在one这个菜单容器中添加一个&quot;文件&quot;菜单项，设置它隶属于file菜单组</span></span><br><span class="line">one.add_cascade(label=<span class="string">&quot;文件&quot;</span>, menu=file)</span><br><span class="line">file.add_command(label=<span class="string">&quot;新建&quot;</span>)</span><br><span class="line">file.add_command(label=<span class="string">&quot;打开&quot;</span>)</span><br><span class="line"><span class="comment"># 水平分割线</span></span><br><span class="line">file.add_separator()</span><br><span class="line">file.add_command(label=<span class="string">&quot;保存&quot;</span>)</span><br><span class="line"><span class="comment"># cmmand执行执行函数</span></span><br><span class="line">file.add_command(label=<span class="string">&quot;关闭&quot;</span>, command=close)</span><br></pre></td></tr></table></figure><p>.Tk()旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.destroy()</td><td>关闭窗口</td></tr><tr><td style="text-align:left">.config()</td><td>将组件展现</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将菜单容器one展现出来</span></span><br><span class="line">t.config(menu=one)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>():</span><br><span class="line">    t.destroy()</span><br></pre></td></tr></table></figure><h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h3><blockquote><p>对Tkinter库的一些说明</p></blockquote><ul><li>基础课程点到为止，学完了解即可，也无法真正开发软件（所需的知识点非常多的）</li><li>后续主题课会通过各种应用软件的开发给有兴趣的同学选择性系统学习</li></ul><h1 id="43-做个小游戏-Pygame入门"><a href="#43-做个小游戏-Pygame入门" class="headerlink" title="43. 做个小游戏.Pygame入门"></a>43. 做个小游戏.Pygame入门</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-Pygame初步"><a href="#1-Pygame初步" class="headerlink" title="1. Pygame初步"></a>1. Pygame初步</h3><blockquote><p>Pygame库是一款专门用于游戏开发的库，用这个库可以做游戏</p></blockquote><ul><li>学习这款库，有以下注意点：<ul><li>由于是针对小学生5年级+，不按成人那种手册式教学</li><li>也就是说：用到哪里，就只讲哪里，并且不涉及原理</li><li><strong>基础课程点到为止介绍Pygame，但主题课只会讲解Pygame zero</strong></li><li><strong>Pygame zero进行了简化封装，更利于小朋友学习研究</strong></li><li>官方文档翻译中文版：<a href="https://blog.csdn.net/Enderman_xiaohei/article/details/87708373">https://blog.csdn.net/Enderman_xiaohei/article/details/87708373</a></li></ul></li></ul><p>pygame库旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.init()</td><td>初始化pygame模块及检查系统</td></tr><tr><td style="text-align:left">.display</td><td>属性，控制窗口和屏幕的模块</td></tr></tbody></table></div><p>.display属性旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.set_mode()</td><td>设置窗体的大小，传递元祖参数，返回Surface模块</td></tr><tr><td style="text-align:left">.set_caption()</td><td>属性，控制窗口和屏幕的模块</td></tr><tr><td style="text-align:left">.flip()</td><td>刷新屏幕</td></tr><tr><td style="text-align:left">.update()</td><td>刷新屏幕部分内容，在不传参时：同上</td></tr></tbody></table></div><p>Surface模块旗下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.fill()</td><td>设置背景颜色</td></tr></tbody></table></div><h3 id="2-代码详解-2"><a href="#2-代码详解-2" class="headerlink" title="2. 代码详解"></a>2. 代码详解</h3><blockquote><p>窗口显示、背景色、标题等设置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入库pygame，并设置别名pg</span></span><br><span class="line"><span class="keyword">import</span> pygame <span class="keyword">as</span> pg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="comment"># 注意1：pgame库旗下的方法init()</span></span><br><span class="line"><span class="comment"># 注意2：它的作用是导入pygame各个模块以及检查系统等</span></span><br><span class="line">pg.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># .display属性：控制窗口和屏幕的模块</span></span><br><span class="line"><span class="comment"># .display旗下set_mode()方法，</span></span><br><span class="line"><span class="comment"># 注意1：传递的参数是一个元祖数据，(长, 高)</span></span><br><span class="line"><span class="comment"># 注意2：赋值给screen，这个变量就可以控制窗体和屏幕</span></span><br><span class="line"><span class="comment"># .display旗下set_caption()方法，设置标题</span></span><br><span class="line">screen = pg.display.set_mode((<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">pg.display.set_caption(<span class="string">&quot;Pygame游戏&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景色</span></span><br><span class="line">bgcolor = <span class="string">&quot;pink&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># screen旗下的fill()方法，设置背景色</span></span><br><span class="line">    screen.fill(bgcolor)</span><br><span class="line">    <span class="comment"># pg.display旗下的flip()方法，刷新屏幕</span></span><br><span class="line">    pg.display.flip()</span><br></pre></td></tr></table></figure><h1 id="44-关掉它-event事件"><a href="#44-关掉它-event事件" class="headerlink" title="44. 关掉它.event事件"></a>44. 关掉它.event事件</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-卸载操作quit"><a href="#1-卸载操作quit" class="headerlink" title="1. 卸载操作quit()"></a>1. 卸载操作quit()</h3><blockquote><p>初始化init()加载所需的各种模块，相对应的卸载就是quit()方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载模块</span></span><br><span class="line">pg.quit()</span><br></pre></td></tr></table></figure><h3 id="2-event事件入门"><a href="#2-event事件入门" class="headerlink" title="2. event事件入门"></a>2. event事件入门</h3><blockquote><p>事件：即需要通过触发才能执行的程序，比如鼠标点击、键盘按键等触发操作</p></blockquote><ul><li>事件如何触发执行？<ul><li>需要不断循环刷新检测，因为鼠标键盘触发是随机时间触发的</li><li>事件类型也有不少，也需要每次把各种事件循环出来一一检测</li></ul></li></ul><p>pygame库旗下的属性（模块）：</p><div class="table-container"><table><thead><tr><th style="text-align:left">模块名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.event</td><td>处理事件和事件列队的模块</td></tr></tbody></table></div><p>.event事件模块下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.get()</td><td>从事件列队里获取事件</td></tr></tbody></table></div><p>.event.get()方法遍历返回值下的属性：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.type</td><td>获取事件对应的值</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历事件</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">    <span class="comment"># 获取事件对应的值</span></span><br><span class="line">    <span class="built_in">print</span>(e.<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure><ul><li>通过检测关闭窗口对应的事件值，然后卸载pygame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历事件</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">    <span class="comment"># 如果检测到事件值为256（即点击了关闭按钮）</span></span><br><span class="line">    <span class="keyword">if</span> e.<span class="built_in">type</span> == <span class="number">256</span>:</span><br><span class="line">        <span class="comment"># 卸载pygame</span></span><br><span class="line">        pg.quit()</span><br></pre></td></tr></table></figure><ul><li>pygame也提供了常量也对应常用的值：pg.QUIT（这个会返回256）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pg.QUIT系统常量，直接返回256</span></span><br><span class="line"><span class="keyword">if</span> e.<span class="built_in">type</span> == pg.QUIT:</span><br></pre></td></tr></table></figure><ul><li>关闭代码编写完毕后，发现会报一个错误：原因是卸载后不认识了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">isOpen = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    screen.fill(bgcolor)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历事件</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">        <span class="comment"># 如果检测到事件值为256（即点击了关闭按钮）</span></span><br><span class="line">        <span class="comment"># pg.QUIT系统常量，直接返回256</span></span><br><span class="line">        <span class="keyword">if</span> e.<span class="built_in">type</span> == pg.QUIT:</span><br><span class="line">            isOpen = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 卸载pygame</span></span><br><span class="line">pg.quit()</span><br></pre></td></tr></table></figure><h1 id="45-移动的圆-绘制方法"><a href="#45-移动的圆-绘制方法" class="headerlink" title="45. 移动的圆.绘制方法"></a>45. 移动的圆.绘制方法</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-图形绘制"><a href="#1-图形绘制" class="headerlink" title="1. 图形绘制"></a>1. 图形绘制</h3><blockquote><p>pygame也自带了各种绘图的方法，我们这里学习一下绘制一个圆以及矩形</p></blockquote><p>pygame库旗下的属性（模块）：</p><div class="table-container"><table><thead><tr><th style="text-align:left">模块名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.draw</td><td>绘图模块</td></tr><tr><td style="text-align:left">.time</td><td>用于管理实践的模块</td></tr></tbody></table></div><p>.draw模块下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.rect()</td><td>绘制一个矩形，参数参考代码</td></tr><tr><td style="text-align:left">.circle()</td><td>绘制一个圆，参数参考代码</td></tr></tbody></table></div><p>.time模块下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Clock()</td><td>可以返回一个追踪时间的变量（对象）</td></tr></tbody></table></div><p>.Clock()方法下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.tick()</td><td>设置刷新频率</td></tr></tbody></table></div><h3 id="2-代码详情"><a href="#2-代码详情" class="headerlink" title="2. 代码详情"></a>2. 代码详情</h3><blockquote><p>绘制一个静态的矩形，绘制一个可以移动的圆，并设置刷新频率</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间追踪</span></span><br><span class="line">clock = pg.time.Clock()</span><br><span class="line"><span class="comment"># 小球默认位置</span></span><br><span class="line">x, y = <span class="number">390</span>, <span class="number">290</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    <span class="comment"># 频率</span></span><br><span class="line">    clock.tick(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 矩形</span></span><br><span class="line">    pg.draw.rect(screen, (<span class="string">&quot;blue&quot;</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">35</span>, <span class="number">35</span>))</span><br><span class="line">    <span class="comment"># 绘制圆</span></span><br><span class="line">    pg.draw.circle(screen, (<span class="string">&quot;red&quot;</span>), (x, y), <span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 默认情况下向右移动</span></span><br><span class="line">    x += <span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="46-键盘控制-事件监听"><a href="#46-键盘控制-事件监听" class="headerlink" title="46. 键盘控制.事件监听"></a>46. 键盘控制.事件监听</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-键盘监听"><a href="#1-键盘监听" class="headerlink" title="1. 键盘监听"></a>1. 键盘监听</h3><blockquote><p>本节课想要通过用户键盘的操作，来改变小球的移动方向</p></blockquote><ul><li>e.type可以获取到事件的类型：<ul><li>键盘按下时返回值是：768</li><li>键盘弹起时返回值是：769</li><li>可以直接判断：e.type == 768</li><li>或者pygame提供了常量pg.KEYDOWN值为：768</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否键盘按下</span></span><br><span class="line"><span class="keyword">elif</span> e.<span class="built_in">type</span> == pg.KEYDOWN:</span><br></pre></td></tr></table></figure><ul><li><p>而对于上下左右的按键常量为：</p><ul><li>上：pg.K_UP</li><li>下：pg.K_DOWN</li><li>左：pg.K_LEFT</li><li>右：pg.K_RIGHT</li></ul></li><li><p>但是，判断具体按键并不是e.type，通过手册查询到是e.key</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 小球方向</span></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&quot;right&quot;</span></span><br><span class="line"></span><br><span class="line">isOpen = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    <span class="comment"># 判断方向</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">dir</span> == <span class="string">&quot;right&quot;</span>:</span><br><span class="line">        x += <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">dir</span> == <span class="string">&quot;left&quot;</span>:</span><br><span class="line">        x -= <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">dir</span> == <span class="string">&quot;up&quot;</span>:</span><br><span class="line">        y -= <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">dir</span> == <span class="string">&quot;down&quot;</span>:</span><br><span class="line">        y += <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">        <span class="keyword">if</span> e.<span class="built_in">type</span> == pg.QUIT:</span><br><span class="line">            isOpen = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 判断是否键盘按下</span></span><br><span class="line">        <span class="keyword">elif</span> e.<span class="built_in">type</span> == pg.KEYDOWN:</span><br><span class="line">            <span class="comment"># 判断按下了左键盘</span></span><br><span class="line">            <span class="keyword">if</span> e.key == pg.K_LEFT:</span><br><span class="line">                <span class="comment">#print(&quot;左&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;left&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> e.key == pg.K_RIGHT:</span><br><span class="line">                <span class="comment">#print(&quot;右&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;right&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> e.key == pg.K_UP:</span><br><span class="line">                <span class="comment">#print(&quot;上&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;up&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> e.key == pg.K_DOWN:</span><br><span class="line">                <span class="comment">#print(&quot;下&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;down&quot;</span></span><br></pre></td></tr></table></figure><h1 id="47-碰撞检测-坐标重叠"><a href="#47-碰撞检测-坐标重叠" class="headerlink" title="47. 碰撞检测.坐标重叠"></a>47. 碰撞检测.坐标重叠</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-坐标重叠"><a href="#1-坐标重叠" class="headerlink" title="1. 坐标重叠"></a>1. 坐标重叠</h3><blockquote><p>我们想让移动的球对方块进行碰撞，采用坐标重叠的方法设计</p></blockquote><ul><li>如果和判断两个图形重叠：<ul><li>得到方块的坐标位置为：x=&gt;100, y=&gt;100</li><li>加上方块本身的大小35，算出占用的区域：x（100~135）, y（100~135）</li><li>有些判断希望擦边一点点不算碰撞，那可以设计一个值让判断更加中心一点</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方块默认位置</span></span><br><span class="line">rx, ry = <span class="number">100</span>, <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    <span class="comment"># 方块占用的区域为：x(100~135)，y(100~135)</span></span><br><span class="line">    pg.draw.rect(screen, (<span class="string">&quot;blue&quot;</span>), (rx, ry, <span class="number">35</span>, <span class="number">35</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判断小球是否碰撞方块</span></span><br><span class="line">    <span class="keyword">if</span> rx != -<span class="number">9999</span> <span class="keyword">and</span> ry != -<span class="number">9999</span>:</span><br><span class="line">        <span class="keyword">if</span> x &gt; rx <span class="keyword">and</span> x &lt; rx + <span class="number">35</span> <span class="keyword">and</span> y &gt; ry <span class="keyword">and</span> y &lt; ry + <span class="number">35</span>:</span><br><span class="line">        <span class="comment"># 让方块飞到天际去</span></span><br><span class="line">            rx = -<span class="number">9999</span></span><br><span class="line">            ry = -<span class="number">9999</span></span><br></pre></td></tr></table></figure><ul><li>用类似的方法判断边缘碰撞：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断小球碰撞边界，边缘坐标+本身大小</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> x &gt; <span class="number">800</span> - <span class="number">20</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> y &gt; <span class="number">600</span> - <span class="number">20</span>:</span><br><span class="line">x, y = <span class="number">390</span>, <span class="number">290</span></span><br></pre></td></tr></table></figure><h1 id="48-计算得分-输入文本"><a href="#48-计算得分-输入文本" class="headerlink" title="48. 计算得分.输入文本"></a>48. 计算得分.输入文本</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-文字输入"><a href="#1-文字输入" class="headerlink" title="1. 文字输入"></a>1. 文字输入</h3><blockquote><p>pygame库提供了文字输入的模块方法font</p></blockquote><p>pygame库旗下的属性（模块）：</p><div class="table-container"><table><thead><tr><th style="text-align:left">模块名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.font</td><td>文字模块</td></tr></tbody></table></div><p>.font模块下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Sysfont()</td><td>返回一个可以创建字体的变量（对象Font）</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置文本</span></span><br><span class="line"><span class="comment"># 注意1：参数1为字体名称，可以在C盘windows下Fonts查阅</span></span><br><span class="line"><span class="comment"># 注意2：参数2为大小20</span></span><br><span class="line">font = pg.font.SysFont(<span class="string">&quot;simhei&quot;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>.Sysfont()方法下方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.render()</td><td>绘制文本</td></tr></tbody></table></div><p>Surface模块下的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.blit()</td><td>将图像或文字图形绘制到窗体上</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得分文本</span></span><br><span class="line"><span class="comment"># 注意1：参数1为文本，参数2为是否平滑抗锯齿</span></span><br><span class="line"><span class="comment"># 注意2：参数3为元祖模式颜色，参数4</span></span><br><span class="line"><span class="comment"># 注意3：blit方法将文本绘制到窗体上</span></span><br><span class="line">screen.blit(font.render(<span class="string">&quot;得分：&quot;</span>, <span class="literal">True</span>, (<span class="string">&quot;black&quot;</span>)), (<span class="number">720</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 分数文本</span></span><br><span class="line">screen.blit(font.render(<span class="built_in">str</span>(score), <span class="literal">True</span>, (<span class="string">&quot;black&quot;</span>)), (<span class="number">780</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><ul><li>对数字进行变动：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得分</span></span><br><span class="line">score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断小球是否碰撞方块</span></span><br><span class="line"><span class="keyword">if</span> rx != -<span class="number">9999</span> <span class="keyword">and</span> ry != -<span class="number">9999</span>:</span><br><span class="line">score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断小球碰撞边界</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> x &gt; <span class="number">800</span> - <span class="number">20</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> y &gt; <span class="number">600</span> - <span class="number">20</span>:</span><br><span class="line">score = <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="49-总裁思维-面向对象"><a href="#49-总裁思维-面向对象" class="headerlink" title="49. 总裁思维.面向对象"></a>49. 总裁思维.面向对象</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-面向过程"><a href="#1-面向过程" class="headerlink" title="1. 面向过程"></a>1. 面向过程</h3><blockquote><p>之前学习的编程方式就是面向过程，即员工思维。</p></blockquote><p>​    <strong>提醒：面向对象难度较大，对于教培老师，当然要掌握；对于小学生，可选；</strong></p><ul><li>所谓员工思维：<ul><li>按部就班的完成每一个步骤：比如上班：<ul><li>1.起床 2.洗脸 3.坐公交 4.打卡进公司 5.工作 …..等</li></ul></li><li>用程序代码理解：自上而下按顺序的一步步完成既定的代码程序；</li></ul></li></ul><h3 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2. 面向对象"></a>2. 面向对象</h3><blockquote><p>面向对象就好比总裁思维，那总裁的思维是哪些？</p></blockquote><ul><li>所谓总裁思维：<ul><li>按需分配让他人执行所要的步骤：比如上班：<ul><li>1.到公司 2.分配任务 3.完</li></ul></li><li>用程序代码理解：以调用的方式，给各个模块发送指令，并执行；</li></ul></li></ul><h3 id="3-属性和方法"><a href="#3-属性和方法" class="headerlink" title="3. 属性和方法"></a>3. 属性和方法</h3><blockquote><p>我们之前已经零星的接触过属性和方法的区别</p></blockquote><ul><li>属性和方法概念：<ul><li>方法其实就是函数，只不过有一个点语法：pg.init()</li><li>方法的其实就是：<strong>对象.方法()</strong>  ，一般用于执行某种行为动作</li><li>而属性，就是不带括号的：e.type</li><li>属性语法为：<strong>对象.属性</strong>，一般用于获取某种特性的值</li><li>备注：我们之前点出万物的变量都可以理解为对象</li></ul></li></ul><ul><li>实例演练，小汽车对象：<ul><li>它有哪些属性呢？<ul><li>价格， 大小， 颜色…等等可以理解为属性</li></ul></li><li>它有哪些方法呢？<ul><li>行驶， 停靠…等等可以理解为方法</li></ul></li><li>获取特性的是属性，执行动作的是方法</li></ul></li></ul><h1 id="50-泰拉瑞亚-类与对象"><a href="#50-泰拉瑞亚-类与对象" class="headerlink" title="50. 泰拉瑞亚.类与对象"></a>50. 泰拉瑞亚.类与对象</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-生成概念"><a href="#1-生成概念" class="headerlink" title="1. 生成概念"></a>1. 生成概念</h3><blockquote><p>有玩过泰拉瑞亚的世界生成形式的游戏吗？大概这个意思</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">A((世界模型)) --&gt;|生成世界1| B((火山岩浆的世界副本));</span><br><span class="line">A((世界模型)) --&gt;|生成世界2| C((寒冰洞窟的世界副本));</span><br><span class="line">A((世界模型)) --&gt;|生成世界3| D((沙漠戈壁的世界副本));</span><br></pre></td></tr></table></figure><ul><li>理解上图：<ul><li>世界模型可以理解为基石（一切的基础），也可以理解为生产世界的工厂，也是后面“类”这个概念；</li><li>生成世界123，即：世界工厂生产的行为，英文为new，新建，创建的意思；</li><li>各种特性的副本，即：对象，对象是具有各种属性和方法的，比如：<ul><li>火山熔岩副本，具有热、灼烧的属性，需要有降温、灭火等方法</li><li>寒冰洞窟副本，具有冷、冰冻的属性，需要有保暖、碎冰等方法</li><li>沙漠戈壁副本，。。。。。</li></ul></li><li>也就是说，类可以包含全部的功能，而生成对象的时候呢，随机选择特性载入；</li><li>下面就需要通过代码来实现这个类和对象。</li></ul></li></ul><h3 id="2-创建类和对象"><a href="#2-创建类和对象" class="headerlink" title="2. 创建类和对象"></a>2. 创建类和对象</h3><blockquote><p>类是一切的基石，而对象是类生成出来的一个副本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写一个世界类</span></span><br><span class="line"><span class="comment"># 注意1：约定俗成，类名首字母大写</span></span><br><span class="line"><span class="comment"># 注意2：class和pass是关键字</span></span><br><span class="line"><span class="comment"># 注意3：两种写法 class World: 或 class World():</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 空类会报错，需要pass填充</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建一个对象，即副本，直接函数形式调用即可</span></span><br><span class="line"><span class="comment"># 注意1：为方便后续使用，一般会将调用类()返回给一个变量</span></span><br><span class="line"><span class="comment"># 注意2：这个w就是这个对象</span></span><br><span class="line"><span class="comment"># 注意3：World()看上去是函数调用，但有自己的名称：实例化</span></span><br><span class="line">w = World()</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(w))</span><br></pre></td></tr></table></figure><h1 id="51-载入特性-创建属性"><a href="#51-载入特性-创建属性" class="headerlink" title="51. 载入特性.创建属性"></a>51. 载入特性.创建属性</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-初始化函数"><a href="#1-初始化函数" class="headerlink" title="1. 初始化函数"></a>1. 初始化函数</h3><blockquote><p>初始化函数：<strong><strong> init </strong>()</strong> 一般在定义类时定义，也可以称为初始化方法</p></blockquote><ul><li>初始化函数作用：<ul><li>如果把类理解成函数，当实例化（创建对象）时，会自动执行初始化函数；</li><li>初始化函数，也叫初始化方法，在别的语言称为构造方法，这里也可以；</li><li>参数1是必填参数，固定关键字self，调用本类里的属性和方法用的；</li><li>那么它的作用到底是什么呢？很简单：在创建对象时自动执行，初始化各项数据；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    <span class="comment"># 定义初始化函数</span></span><br><span class="line">    <span class="comment"># 注意1：参数1固定为self，必传，关键字</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 函数没内容，pass占位</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">w = World()</span><br></pre></td></tr></table></figure><h3 id="1-类的属性"><a href="#1-类的属性" class="headerlink" title="1. 类的属性"></a>1. 类的属性</h3><blockquote><p>类的属性，一般用于保证创建的对象具有相应的特性</p></blockquote><ul><li>那么，如何创建三个不同特性的世界副本呢？通过初始化函数试试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    <span class="comment"># 定义初始化函数</span></span><br><span class="line">    <span class="comment"># 注意1：参数1固定为self，必传，关键字</span></span><br><span class="line">    <span class="comment"># 注意2：self代表World本身</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建属性</span></span><br><span class="line">        self.name = <span class="string">&quot;火山&quot;</span></span><br><span class="line">        self.gender = <span class="string">&quot;熔岩&quot;</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">w1 = World()</span><br><span class="line"><span class="built_in">print</span>(w1.name+w1.gender,<span class="string">&quot;的世界被创建！&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>以上的代码只能创建有一个特性的世界副本。如何创建不同的呢？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    <span class="comment"># 定义初始化函数</span></span><br><span class="line">    <span class="comment"># 注意1：参数1固定为self，必传，关键字</span></span><br><span class="line">    <span class="comment"># 注意2：self代表World本身的实例化对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        <span class="comment"># 创建属性</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 给初始化函数传参</span></span><br><span class="line"><span class="comment"># 相当于给生成的世界做自定义选项</span></span><br><span class="line"><span class="comment"># 或者添加了世界种子之类的东西</span></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.name+w1.gender,<span class="string">&quot;的世界被创建！&quot;</span>)</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.name+w2.gender,<span class="string">&quot;的世界被创建！&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>结构分析：<ul><li>每个对象都是内存独立分配的空间；</li><li>每个对象的属性，都是独立的，和其它对象属性毫无关系；</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">B((火山岩浆的世界副本))--&gt; E[(name gender)];</span><br><span class="line">C((寒冰洞窟的世界副本))--&gt; F[(name gender)];</span><br><span class="line">D((沙漠戈壁的世界副本))--&gt; G[(name gender)];</span><br></pre></td></tr></table></figure><h1 id="52-固有特性-静态属性"><a href="#52-固有特性-静态属性" class="headerlink" title="52. 固有特性.静态属性"></a>52. 固有特性.静态属性</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-静态概念"><a href="#1-静态概念" class="headerlink" title="1. 静态概念"></a>1. 静态概念</h3><blockquote><p>所谓静态，无法实例化改变，数据定义后可以共享给所有对象使用</p></blockquote><ul><li>所谓静态属性：<ul><li>静态属性，直接在类的顶部定义，无法通过对象改变的属性；</li><li>静态属性可以用一个特殊的语法：<strong>类.静态属性</strong>，而无需实例化对象；</li><li>什么样的环境需要静态：所有对象的某个属性特性都是同一个值，那就可以静态（共享）；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 静态属性</span></span><br><span class="line">    <span class="comment"># 注意1：不在初始化函数里，不需要self</span></span><br><span class="line">    <span class="comment"># 注意2：不通过函数赋值，可直接赋值</span></span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.age)</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类.静态属性</span></span><br><span class="line"><span class="built_in">print</span>(World.age)</span><br></pre></td></tr></table></figure><h3 id="2-动态属性"><a href="#2-动态属性" class="headerlink" title="2. 动态属性"></a>2. 动态属性</h3><blockquote><p>动态属性，就很好理解了。直接在实例化对象创建的属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.age)</span><br><span class="line"><span class="comment"># 实例化对象直接创建的属性</span></span><br><span class="line"><span class="comment"># 类似普通变量，在类中不存在，本身也是实例属性</span></span><br><span class="line">w1.info = <span class="string">&quot;我是动态属性&quot;</span></span><br><span class="line"><span class="built_in">print</span>(w1.info)</span><br></pre></td></tr></table></figure><ul><li>名词解释：<ul><li>创建属性：一般是在类里声明的属性，比如 <strong>self.name</strong> 这种；</li><li>实例属性：实例化后对象调用的属性，比如 <strong>w1.name</strong> 这种；</li><li>静态属性：可以用类直接调用，也可以对象调用的属性：<strong>World.age</strong> 这种；</li><li>动态属性：类里面没有定义的属性，在实例化后对象直接声明的属性：<strong>w1.info</strong> 这种；</li></ul></li></ul><h1 id="53-行动激活-创建方法"><a href="#53-行动激活-创建方法" class="headerlink" title="53. 行动激活.创建方法"></a>53. 行动激活.创建方法</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-实例方法"><a href="#1-实例方法" class="headerlink" title="1. 实例方法"></a>1. 实例方法</h3><blockquote><p>实例方法（函数），也是普通类里的方法，用于执行实例化对象后的某种行为</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法（函数），self是函数必填的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;遇到火山熔岩副本，我要使用降温灭火装备！&quot;</span></span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 实例方法</span></span><br><span class="line"><span class="built_in">print</span>(w1.run())</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.run())</span><br></pre></td></tr></table></figure><p>如果要实现针对不同对象（副本），采取对应的行为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, a, b</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 类方法（函数），self是函数必填的</span></span><br><span class="line">    <span class="comment"># 注意：字符串太长，可以在+号后面加一个\表示换行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;遇到&quot;</span> + self.name + self.gender +\</span><br><span class="line">               <span class="string">&quot;副本，我要使用&quot;</span> + self.a + self.b + <span class="string">&quot;装备！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>, <span class="string">&quot;降温&quot;</span>, <span class="string">&quot;灭火&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.run())</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>, <span class="string">&quot;保暖&quot;</span>, <span class="string">&quot;碎冰&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.run())</span><br></pre></td></tr></table></figure><h3 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a>2. 静态方法</h3><blockquote><p>和静态属性一样，静态方法是每一个对象（副本）都可以共享使用的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line"><span class="comment"># 在普通方法上方设置@staticmethod就变成静态方法</span></span><br><span class="line"><span class="comment"># 这种@的语法叫做装饰器语法</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">over</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Game Over！&quot;</span></span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>, <span class="string">&quot;降温&quot;</span>, <span class="string">&quot;灭火&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.run())</span><br><span class="line"><span class="built_in">print</span>(w1.over())</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>, <span class="string">&quot;保暖&quot;</span>, <span class="string">&quot;碎冰&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.run())</span><br><span class="line"><span class="built_in">print</span>(w2.over())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法可以直接通过类名.方法()</span></span><br><span class="line"><span class="built_in">print</span>(World.over())</span><br></pre></td></tr></table></figure><h3 id="3-动态方法"><a href="#3-动态方法" class="headerlink" title="3. 动态方法"></a>3. 动态方法</h3><blockquote><p>和动态属性一样，在类外声明的普通函数，并用实例化对象调用的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;吃饭&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将函数名赋值给动态属性</span></span><br><span class="line">w2.eat = eat</span><br><span class="line"><span class="built_in">print</span>(w2.eat())</span><br></pre></td></tr></table></figure><h3 id="4-类方法"><a href="#4-类方法" class="headerlink" title="4. 类方法"></a>4. 类方法</h3><blockquote><p>使用装饰器@classmethod声明的方法</p></blockquote><ul><li>类方法：<ul><li>和静态方法一样，支持 <strong>类.方法()</strong> 的调用方式；</li><li>静态方法只处理数据，无法获取本类的数据，比如无法使用self；</li><li>类方法必须传递 <strong>cls</strong> 参数，通过这个 <strong>cls</strong> 来调用本类的静态属性等；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">cls</span>):</span><br><span class="line"><span class="keyword">return</span> cls.age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法</span></span><br><span class="line"><span class="built_in">print</span>(World.info())</span><br></pre></td></tr></table></figure><h1 id="54-私有属性-封装"><a href="#54-私有属性-封装" class="headerlink" title="54. 私有属性.封装"></a>54. 私有属性.封装</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1. 封装性"></a>1. 封装性</h3><blockquote><p>面向对象有三大特性：封装、继承和多态，那什么是封装？</p></blockquote><ul><li>封装的解释：<ul><li>对属性进行私有化操作，这种行为就是封装；</li><li>为何要封装，防止这些属性被污染；</li><li>怎么理解污染？想一下电脑机箱，为何要把主板、内存、显卡封在壳子里，只留个插孔；</li></ul></li><li>我们先看下公有属性，如何赋值和取值的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 共有属性特性</span></span><br><span class="line"><span class="comment"># 注意1：可以直接赋值</span></span><br><span class="line"><span class="comment"># 注意2：可以直接输出</span></span><br><span class="line">w1.name = <span class="string">&quot;沙漠&quot;</span></span><br><span class="line"><span class="built_in">print</span>(w1.name)</span><br></pre></td></tr></table></figure><ul><li>将公有属性，转换为私有属性后：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">    <span class="comment"># 私有属性，只要在前面加上两个下划线即可</span></span><br><span class="line">    self.__name = name</span><br><span class="line">    self.__gender = gender</span><br><span class="line">    </span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 私有属性直接获取，报错</span></span><br><span class="line"><span class="built_in">print</span>(w1.__name)</span><br></pre></td></tr></table></figure><ul><li>封装私有化后，提供一个可以取值的入口方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        <span class="comment"># 私有属性，只要在前面加上两个下划线即可</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 私有变量被封装了，但可以设置一个方法作为调用入口</span></span><br><span class="line"><span class="comment"># 这个调用入口就好比机箱提供的插口区</span></span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><ul><li>封装私有化赋值，有时不是在实例化后赋值的，可以再建立一个赋值入口：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name = <span class="string">&quot;&quot;</span>, gender = <span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="comment"># 私有属性，只要在前面加上两个下划线即可</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setName</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">w1 = World()</span><br><span class="line"><span class="comment"># 私有化后的属性赋值</span></span><br><span class="line">w1.setName(<span class="string">&quot;沙漠&quot;</span>)</span><br><span class="line"><span class="comment"># 私有变量被封装了，但可以设置一个方法作为调用入口</span></span><br><span class="line"><span class="comment"># 这个调用入口就好比机箱提供的插口区</span></span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><h3 id="2-私有方法"><a href="#2-私有方法" class="headerlink" title="2. 私有方法"></a>2. 私有方法</h3><blockquote><p>私有方法和私有属性概念一样</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我是私有方法，外部无法调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__run</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;运行。。。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法执行私有方法</span></span><br><span class="line"><span class="built_in">print</span>(w1.__run())</span><br></pre></td></tr></table></figure><ul><li>私有方法也需要一个入口，来执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我是私有方法，外部无法调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;运行。。。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对外公开的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">print</span>(w1.go())</span><br></pre></td></tr></table></figure><h1 id="55-装饰器-property"><a href="#55-装饰器-property" class="headerlink" title="55. 装饰器.@property"></a>55. 装饰器.@property</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-property"><a href="#1-property" class="headerlink" title="1. @property"></a>1. @property</h3><blockquote><p><strong>getName()</strong> 和 <strong>setName()</strong> 是一种比较通用的封装属性的手段，但还是有点麻烦</p></blockquote><ul><li>先补遗下容易出错的点：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name = <span class="string">&quot;火山&quot;</span>, gender = <span class="string">&quot;熔岩&quot;</span></span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对外获取私有属性__name</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">w1 = World()</span><br><span class="line"><span class="comment"># 私有属性无法直接赋值取值，但操作语法并不报错</span></span><br><span class="line"><span class="comment"># 这里的__name已经是动态属性，和类里面的私有属性无关</span></span><br><span class="line">w1.__name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line"><span class="comment"># 这里输出的是动态属性 寒冰</span></span><br><span class="line"><span class="built_in">print</span>(w1.__name)</span><br><span class="line"><span class="comment"># 之类获取到私有属性 火山</span></span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><ul><li>问题分析：<ul><li>私有属性赋值有两种，一种就是 <strong>初始化函数传参</strong>，第二种就是 <strong>setName()</strong> 方法；</li><li>我们希望属性在对象这里，直接用属性赋值取值，可读性更好一些；</li><li>所以，需要使用装饰器@property来完成这种功能，具体如下：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name = <span class="string">&quot;火山&quot;</span>, gender = <span class="string">&quot;熔岩&quot;</span></span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 装饰器</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 装饰器</span></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w1 = World()</span><br><span class="line">w1.name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line"><span class="comment"># 下面两种获取均为 寒冰</span></span><br><span class="line"><span class="built_in">print</span>(w1.name)</span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><h1 id="56-第二大特性-继承"><a href="#56-第二大特性-继承" class="headerlink" title="56. 第二大特性.继承"></a>56. 第二大特性.继承</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-继承概念"><a href="#1-继承概念" class="headerlink" title="1. 继承概念"></a>1. 继承概念</h3><blockquote><p>父亲有100w，儿子继承了父亲的100w，那么儿子就有了100w，这就是继承</p></blockquote><ul><li>继承扩展理解：<ul><li>世界类或世界工厂，在生成火山、寒冰、沙漠副本时，逻辑都在本类或本工厂里；</li><li>当这些副本需求内容过多，或逻辑逐步复杂时，世界工厂内的代码将变得冗余难以理解；</li><li>尤其是当需要通过实例化调用时传递不同参数时，也会变成杂乱可读性差；</li><li>那么，我们将这个工厂开始拆分，分为三个工厂：火山工厂、寒冰工厂、沙漠工厂；</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">B((火山模型)) --&gt;|生成世界|E((火山岩浆的世界副本));</span><br><span class="line">C((寒冰模型)) --&gt;|生成世界|F((寒冰洞窟的世界副本));</span><br><span class="line">D((沙漠模型)) --&gt;|生成世界|G((沙漠戈壁的世界副本));</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>:</span><br><span class="line">    name = <span class="string">&quot;火山&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;熔岩&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 寒冰类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>:</span><br><span class="line">    name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;洞窟&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire()</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold()</span><br><span class="line">c.fight()</span><br></pre></td></tr></table></figure><ul><li>结构分析：<ul><li>模型拆分后，逻辑上清晰很多，不用在一个类中设计太多不同副本的功能；</li><li>初始化函数的传递参数上，直接被静态属性取代了；</li><li>但暴露出一个新的问题，每个副本都有相同的行为和属性怎么办？<ul><li>比如，这里 <strong>fight()</strong> 战斗方法，由于拆分后，又冗余了；</li></ul></li></ul></li></ul><h1 id="57-复制共性-改写特性"><a href="#57-复制共性-改写特性" class="headerlink" title="57. 复制共性.改写特性"></a>57. 复制共性.改写特性</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-子类继承"><a href="#1-子类继承" class="headerlink" title="1. 子类继承"></a>1. 子类继承</h3><blockquote><p>要解决火山、寒冰等工厂冗余问题，我们还得请回世界工厂来整合共性</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">A((世界模型)) --&gt;|继承| B((火山模型)) --&gt;|生成世界|E((火山岩浆的世界副本));</span><br><span class="line">A((世界模型)) --&gt;|继承| C((寒冰模型)) --&gt;|生成世界|F((寒冰洞窟的世界副本));</span><br><span class="line">A((世界模型)) --&gt;|继承| D((沙漠模型)) --&gt;|生成世界|G((沙漠戈壁的世界副本));</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 将相同的逻辑放在父类继承</span></span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="comment"># 注意1：子类继承父类，只需要在括号里传入父类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    name = <span class="string">&quot;火山&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;熔岩&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;洞窟&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.age)</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold()</span><br><span class="line">c.fight()</span><br></pre></td></tr></table></figure><h3 id="2-改写特性"><a href="#2-改写特性" class="headerlink" title="2. 改写特性"></a>2. 改写特性</h3><blockquote><p>有时，我们需要修改父类继承下来的属性和方法，以及初始化函数</p></blockquote><ul><li>初始化函数：<ul><li>上面为了方便理解，均用了静态属性；</li><li>本次我们尝试用初始化函数的声明的属性试一试；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 将相同的逻辑放在父类继承</span></span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="comment"># 注意1：子类继承父类，只需要在括号里传入父类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.age)</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞穴&quot;</span>)</span><br><span class="line">c.fight()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果取消掉实例化的传递参数，开始改写属性：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="comment"># 注意1：子类继承父类，只需要在括号里传入父类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="comment"># 重写属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 子类调用父类的初始化函数，并传递参数</span></span><br><span class="line">        World.__init__(self, <span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="comment"># 重写属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        World.__init__(self, <span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞穴&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.age)</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold()</span><br><span class="line">c.fight()</span><br></pre></td></tr></table></figure><ul><li>那么，如何改写方法呢？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment">#调用父类</span></span><br><span class="line">    World.fight(self)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h1 id="58-继承中的抽象化"><a href="#58-继承中的抽象化" class="headerlink" title="58. 继承中的抽象化"></a>58. 继承中的抽象化</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-抽象化"><a href="#1-抽象化" class="headerlink" title="1. 抽象化"></a>1. 抽象化</h3><blockquote><p>对于父类，我们有几个问题有待解决，比如父类要不要封装等</p></blockquote><ul><li>对于继承的思考：<ul><li>首先，父类能不能实例化，答案：现在能，但我们希望不能；</li><li>因为，我们只是希望使用子类创建对象副本，父类只是提供规范；</li><li>或者，用好理解的语言表述：总裁只是下达命令，真正执行的是员工；</li><li>员工按照命令去执行即可，但员工自然也有自己独有的特性罢了；</li><li>所以，在父类中，有些属性和方法，我们只希望提供规范让子类实现：<ul><li>而这种属性和方法称为：<strong>抽象属性</strong> 和 <strong>抽象方法</strong></li></ul></li></ul></li></ul><ul><li>创建一个抽象的世界类，防止用户实例化：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入abc模块，实现抽象化</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=abc.ABCMeta):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 无法实例化</span></span><br><span class="line">w1 = World()</span><br></pre></td></tr></table></figure><ul><li>创建一个子类去继承抽象父类，实例化后强制要求实现抽象方法： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例化后，报错，提示必须实现父类的抽象方法</span></span><br><span class="line"><span class="comment"># 也就是，总裁的命令必须完成</span></span><br><span class="line">f = Fire()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;战斗！&quot;</span></span><br><span class="line">    </span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.fight())</span><br></pre></td></tr></table></figure><ul><li>最后一个抽象属性定义：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入abc模块，实现抽象化</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=abc.ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#抽象属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;在&quot;</span> + self.__name + <span class="string">&quot;区域战斗！&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 抽象属性也必须强制定义</span></span><br><span class="line">f = Fire()</span><br><span class="line">f.name = <span class="string">&quot;火山&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f.fight())</span><br></pre></td></tr></table></figure><ul><li>为了更加直观，改写一下import引入方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们只用abc模块中的两个方法，这样可以去掉abc.的前缀</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#抽象属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="59-第三大特性-多态"><a href="#59-第三大特性-多态" class="headerlink" title="59. 第三大特性.多态"></a>59. 第三大特性.多态</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-多态的概念"><a href="#1-多态的概念" class="headerlink" title="1. 多态的概念"></a>1. 多态的概念</h3><blockquote><p>多态：即多种形态，执行同一种命令根据场景不同而执行不同的行为特征</p></blockquote><ul><li>多态理解：<ul><li>go()这个方法，“走”的意思，但环境不同意思不同：<ul><li>在餐厅前go()，表示吃饭；</li><li>在校门前go()，表示上课；</li><li>在网吧前go()，表示打游戏；</li></ul></li><li>那么方法，肯定是固定的，那么就必须实现子类重写父类；</li><li>而调用者也是固定的，否则叫什么多态？</li></ul></li></ul><ul><li>第一种做法，通过固有函数作为执行者，传入不同环境实现不同行为的多态；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与炎魔战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与霜魔战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">obj</span>):</span><br><span class="line">    obj.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用，传入不同的子类对象实现执行不同行为</span></span><br><span class="line">fight(Fire())</span><br><span class="line">fight(Cold())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">f = Fire()</span></span><br><span class="line"><span class="string">c = Cold()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fight(f)</span></span><br><span class="line"><span class="string">fight(c)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>第二种做法，通过普通父类的方法去执行子类的方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self, obj</span>):</span><br><span class="line">        obj.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与炎魔战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与霜魔战斗！&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">w = World()</span><br><span class="line"><span class="comment"># 调用父类的方法执行子类的方法</span></span><br><span class="line">w.fight(Fire())</span><br><span class="line">w.fight(Cold())</span><br></pre></td></tr></table></figure><ul><li>好处：当有非常多的副本，但他们通用的功能是战斗，而战斗的细节又不同，就避免大量的if等判断操作。</li></ul><h1 id="60-面向对象工具箱"><a href="#60-面向对象工具箱" class="headerlink" title="60. 面向对象工具箱"></a>60. 面向对象工具箱</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-工具箱合集"><a href="#1-工具箱合集" class="headerlink" title="1. 工具箱合集"></a>1. 工具箱合集</h3><blockquote><p>面向对象中，有很多工具方法来更方便的查询或构建我们的代码</p></blockquote><ul><li>一般带有前后两个下划线的方法，称为魔术方法：<ul><li><strong> init </strong> ()  ：初始化函数，或称为构造方法，当实例化时</li><li><strong> str </strong> () ：打印对象时，替代原本的描述信息</li><li><strong> del </strong>()  ：析构函数，和 初始化 正好相反，当删除实例化对象时触发</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># __str__() 替代本来的对象描述</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一个世界类&quot;</span> + <span class="built_in">str</span>(self.x)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 析构函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除对象时，我被触发&quot;</span> + <span class="built_in">str</span>(self.y))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">w = World(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="keyword">del</span> w</span><br></pre></td></tr></table></figure><h3 id="2-super-函数"><a href="#2-super-函数" class="headerlink" title="2. super()函数"></a>2. super()函数</h3><blockquote><p>重写父类方法时，我们还需要得到父类方法最终的结果，使用super()函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;World！&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 火类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 通过 super()函数调用父类方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().run() + <span class="string">&quot;Fire！&quot;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.run())</span><br></pre></td></tr></table></figure><h1 id="61-实训-塞尔达传说①"><a href="#61-实训-塞尔达传说①" class="headerlink" title="61. 实训.塞尔达传说①"></a>61. 实训.塞尔达传说①</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h3><blockquote><p>从本节课开始，我们用面向对象实战一款经典的开放世界文字版：塞尔达传说</p></blockquote><ul><li>具体要求如下：<ul><li>游戏开始，醒来，系统让你输入用户名；</li><li>当然，不管你输入什么（除了林克），系统都会纠正你叫“林克”；输入正确，不会纠正；</li><li>你走出洞穴，生命体只有1颗星，遇到烤火老爷爷，要给你两个烤苹果；</li><li>你接受吃了烤苹果，则变成3颗星，你走入寒冰区，老爷爷要给你防寒服，你可以选择；</li><li>防寒服可以增加你在本区域的防御值，你原本的防御值为1，遇到寒冰怪，血量为1，它先手；</li><li>对战胜利或失败，失败退出游戏；胜利后，进入火山区，矿工要给你防火服，同上；</li><li>然后，走入城堡拯救公主，公主介绍Boss，攻击力10000，防御力4000，生命值5000，它先手；</li><li>她说可以给你一把攻击力8999的光之弓，还加送一张先手祝福之卷轴；胜利或失败；</li></ul></li></ul><h3 id="2-初始化数据"><a href="#2-初始化数据" class="headerlink" title="2. 初始化数据"></a>2. 初始化数据</h3><blockquote><p>直接面向对象，对于新手来说不太容易，先面向过程开始，从底层打工开始</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 游戏开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏开始....&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;林克，林克，林克，醒一醒....&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化名字</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">&quot;林克&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你忘了吗？你叫林克！&quot;</span>)</span><br><span class="line">    name = <span class="string">&quot;林克&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 初始化血量</span></span><br><span class="line">life = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n走出洞穴，遇到一个老爷爷，他要送你两个烤苹果！&quot;</span>)</span><br><span class="line">flag = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">    life += <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你的生命值+2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化防御力</span></span><br><span class="line">defence = <span class="number">1</span></span><br><span class="line"><span class="comment"># 初始化攻击力</span></span><br><span class="line">attack = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br></pre></td></tr></table></figure><h1 id="62-实训-塞尔达传说②"><a href="#62-实训-塞尔达传说②" class="headerlink" title="62. 实训.塞尔达传说②"></a>62. 实训.塞尔达传说②</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-对战系统"><a href="#1-对战系统" class="headerlink" title="1. 对战系统"></a>1. 对战系统</h3><blockquote><p>和怪物攻击，默认怪先手，通过数值加减来判断胜利或失败</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 走入寒冰区</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n走入寒冰区，老爷爷要送你防寒服！&quot;</span>)</span><br><span class="line"><span class="comment"># 区域防御力</span></span><br><span class="line">defence_cold = <span class="number">0</span></span><br><span class="line">flag = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">    defence_cold = defence + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你的寒冰区防御力+1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遇到第一个怪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n你遇到了寒冰怪，开始挑战！&quot;</span>)</span><br><span class="line">enemy1_atk = <span class="number">2</span></span><br><span class="line">enemy1_life = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 怪物先手，开始攻击，攻击算法：怪物攻击力 - 玩家防御力</span></span><br><span class="line">    <span class="comment"># 玩家的生命值 = 玩家生命总量 - （怪物攻击力 - 玩家区域防御力）</span></span><br><span class="line">    <span class="comment"># 吃满buff第一轮：3 - (2 - 2) = 3</span></span><br><span class="line">    <span class="comment"># 不吃buff第一轮：1 - (2 - 1) = 0 死了</span></span><br><span class="line">    life = life - (enemy1_atk - defence_cold)</span><br><span class="line">    <span class="comment"># 判断玩家生命</span></span><br><span class="line">    <span class="keyword">if</span> life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;挑战失败！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 玩家开始攻击</span></span><br><span class="line">    enemy1_life = enemy1_life - attack</span><br><span class="line">    <span class="comment"># 判断怪物的生命</span></span><br><span class="line">    <span class="keyword">if</span> enemy1_life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你胜利了！目前生命值为：%d&quot;</span>%life)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胜利后继续走入火山区</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n胜利后继续走入火山区&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br></pre></td></tr></table></figure><h3 id="2-退出机制"><a href="#2-退出机制" class="headerlink" title="2. 退出机制"></a>2. 退出机制</h3><blockquote><p>胜利后可继续往下执行，但失败后，要退出整个系统，需要函数处理</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 游戏开始</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="63-实训-塞尔达传说③"><a href="#63-实训-塞尔达传说③" class="headerlink" title="63. 实训.塞尔达传说③"></a>63. 实训.塞尔达传说③</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-重复对战"><a href="#1-重复对战" class="headerlink" title="1. 重复对战"></a>1. 重复对战</h3><blockquote><p>直接继续复制寒冰区的代码即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取防火服</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n火山区矿工告诉你，里面很热，需要防火服&quot;</span>)</span><br><span class="line"><span class="comment"># 区域防御力</span></span><br><span class="line">defence_fire = <span class="number">0</span></span><br><span class="line">flag = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">defence_fire = defence + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的火山区防御力+1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遇到第一个怪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n你遇到了熔岩怪，进入战斗模式！&quot;</span>)</span><br><span class="line">enemy2_atk = <span class="number">2</span></span><br><span class="line">enemy2_life = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">life = life - (enemy2_atk - defence_fire)</span><br><span class="line"><span class="comment"># 判断玩家生命</span></span><br><span class="line"><span class="keyword">if</span> life &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;挑战失败！&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 玩家开始攻击</span></span><br><span class="line">enemy2_life = enemy2_life - attack</span><br><span class="line"><span class="comment"># 判断怪物的生命</span></span><br><span class="line"><span class="keyword">if</span> enemy2_life &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你胜利了！目前生命值为：%d&quot;</span>%life)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胜利后继续走入城堡</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n胜利后走入城堡迎接公主&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br></pre></td></tr></table></figure><h3 id="2-Boss登场"><a href="#2-Boss登场" class="headerlink" title="2. Boss登场"></a>2. Boss登场</h3><blockquote><p>介绍Boss和初始化数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公主介绍Boss</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n公主：我的骑士啊！恶魔的攻击力为10000，防御力4000，生命值5000，而且先手！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我这里有一把攻击力为8999光之弓，还有一张先手祝福之卷轴！&quot;</span>)</span><br><span class="line">flag1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受光之弓？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line">flag2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受先手祝福之卷轴？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恶魔数据</span></span><br><span class="line">enemy3_life = <span class="number">5000</span></span><br><span class="line">enemy3_defence = <span class="number">4000</span></span><br><span class="line">enemy3_atk = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新攻击力</span></span><br><span class="line"><span class="keyword">if</span> flag1 == <span class="number">1</span>:</span><br><span class="line">attack += <span class="number">8999</span></span><br></pre></td></tr></table></figure><h1 id="64-实训-塞尔达传说④"><a href="#64-实训-塞尔达传说④" class="headerlink" title="64. 实训.塞尔达传说④"></a>64. 实训.塞尔达传说④</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-Boss对战"><a href="#1-Boss对战" class="headerlink" title="1. Boss对战"></a>1. Boss对战</h3><blockquote><p>Boss对战和小怪基本一致，主要是否接受先手Buff这个条件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 判断先手</span></span><br><span class="line">    <span class="keyword">if</span> flag2 == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 玩家开始攻击</span></span><br><span class="line">        enemy3_life = enemy3_life + enemy3_defence - attack</span><br><span class="line">        <span class="comment"># 取消先手buff</span></span><br><span class="line">        flag2 = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 判断怪物的生命</span></span><br><span class="line">        <span class="keyword">if</span> enemy3_life &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n你战胜了恶魔，拯救了公主，游戏通关！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    life = life - (enemy3_atk - defence)</span><br><span class="line">    <span class="comment"># 判断玩家生命</span></span><br><span class="line">    <span class="keyword">if</span> life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你被恶魔打败啦，公主也没救回来！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 玩家开始攻击</span></span><br><span class="line">    enemy3_life = enemy3_life + enemy3_defence - attack</span><br><span class="line">    <span class="comment"># 判断怪物的生命</span></span><br><span class="line">    <span class="keyword">if</span> enemy3_life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n你战胜了恶魔，拯救了公主，游戏通关！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>员工的编码思维已经做完，后面要改成面向对象的方式。</li></ul><h1 id="65-实训-塞尔达传说⑤"><a href="#65-实训-塞尔达传说⑤" class="headerlink" title="65. 实训.塞尔达传说⑤"></a>65. 实训.塞尔达传说⑤</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-旁白类"><a href="#1-旁白类" class="headerlink" title="1. 旁白类"></a>1. 旁白类</h3><blockquote><p>文字游戏，太多旁白，我们先从这里入手进行整理吧</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 旁白类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Aside</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开场语音</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏开始....&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;林克，林克，林克，醒一醒....&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 介绍Boss</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">boss</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n公主：我的骑士啊！恶魔的攻击力为10000，防御力4000，生命值5000，而且先手！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我这里有一把攻击力为8999光之弓，还有一张先手祝福之卷轴！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏胜利</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">win</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你战胜了恶魔，拯救了公主，游戏通关！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 败于谁下</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">who</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你被%s打败啦，公主也没救回来！&quot;</span>%name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏失败</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 战斗旁白</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n你遇到了%s，进入战斗模式！&quot;</span>%name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单局胜利</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">single</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;恭喜你战胜了%s！&quot;</span>%name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 人物状态</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">status</span>(<span class="params">life, defence, attack</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入提示</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input</span>(<span class="params">info</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span>(<span class="string">&quot;是否接受%s？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>%info)</span><br></pre></td></tr></table></figure><ul><li>然后，在主程序用静态方法来调用这些归类好的方法即可：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开场</span></span><br><span class="line">Aside.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">Aside.who(name)</span><br><span class="line">Aside.over()</span><br><span class="line"></span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></figure><h1 id="66-实训-塞尔达传说⑥"><a href="#66-实训-塞尔达传说⑥" class="headerlink" title="66. 实训.塞尔达传说⑥"></a>66. 实训.塞尔达传说⑥</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-人物类"><a href="#1-人物类" class="headerlink" title="1. 人物类"></a>1. 人物类</h3><blockquote><p>将玩家的数据信息，单独通过一个类来管理调用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 人物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, life, defence, attack</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__life = life</span><br><span class="line">        self.__defence = defence</span><br><span class="line">        self.__attack = attack</span><br><span class="line">        self.__defence_cold = <span class="number">0</span></span><br><span class="line">        self.__defence_fire = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @life.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self, life</span>):</span><br><span class="line">        self.__life = life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self, defence</span>):</span><br><span class="line">        self.__defence = defence</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @attack.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, attack</span>):</span><br><span class="line">        self.__attack = attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_cold</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence_cold</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence_cold.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_cold</span>(<span class="params">self, defence_cold</span>):</span><br><span class="line">        self.__defence_cold = defence_cold</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence_fire</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence_cold.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_fire</span>(<span class="params">self, defence_fire</span>):</span><br><span class="line">        self.__defence_fire = defence_fire</span><br></pre></td></tr></table></figure><ul><li>然后通过Aside开场时，生成人物对象，在主程序操作人物数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开场语音</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;游戏开始....&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;林克，林克，林克，醒一醒....&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化名字</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;林克&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你忘了吗？你叫林克！&quot;</span>)</span><br><span class="line">        name = <span class="string">&quot;林克&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 实例化人物数据</span></span><br><span class="line">     p = Person(name, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><ul><li>主程序，涉及到人物的六个属性时，全部加上<strong>对象.属性</strong>的格式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 攻击</span></span><br><span class="line">p.life = p.life - (enemy1_atk - p.defence_cold)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line">Aside.status(p.life, p.defence, p.attack)</span><br></pre></td></tr></table></figure><h1 id="67-实训-塞尔达传说⑦"><a href="#67-实训-塞尔达传说⑦" class="headerlink" title="67. 实训.塞尔达传说⑦"></a>67. 实训.塞尔达传说⑦</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-怪物类"><a href="#1-怪物类" class="headerlink" title="1. 怪物类"></a>1. 怪物类</h3><blockquote><p>将怪物的数据信息，单独通过一个类来管理调用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 怪物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, life, attack, defence = <span class="number">0</span></span>):</span><br><span class="line">        self.__life = life</span><br><span class="line">        self.__attack = attack</span><br><span class="line">        self.__defence = defence</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @life.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self, life</span>):</span><br><span class="line">        self.__life = life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @attack.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, attack</span>):</span><br><span class="line">        self.__attack = attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self, defence</span>):</span><br><span class="line">        self.__defence = defence</span><br></pre></td></tr></table></figure><ul><li>主程序，涉及到怪物的三个属性时，全部加上<strong>对象.属性</strong>的格式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建寒冰怪，实例化</span></span><br><span class="line">en1 = Enemy(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 怪物属性调用</span></span><br><span class="line">p.life = p.life - (en1.attack - p.defence_cold)</span><br></pre></td></tr></table></figure><h1 id="68-实训-塞尔达传说⑧"><a href="#68-实训-塞尔达传说⑧" class="headerlink" title="68. 实训.塞尔达传说⑧"></a>68. 实训.塞尔达传说⑧</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-战斗类"><a href="#1-战斗类" class="headerlink" title="1. 战斗类"></a>1. 战斗类</h3><blockquote><p>将小怪和boss战的逻辑，存储到一个单独的类进行管理</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 战斗类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fight</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 和普通怪战斗</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">general</span>(<span class="params">p, en, Aside, defence</span>):</span><br><span class="line">        <span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 怪物先手：攻击：怪物攻击力 - 玩家防御力</span></span><br><span class="line">            <span class="comment"># 玩家生命值 = 玩家生命总量 - (怪物攻击 - 玩家区域防御力)</span></span><br><span class="line">            <span class="comment"># 吃满buff第一轮：3 - (2 - 2) = 3</span></span><br><span class="line">            <span class="comment"># 不吃buff第一轮：1 - (2 - 1) = 0 死亡</span></span><br><span class="line">            p.life = p.life - (en.attack - defence)</span><br><span class="line">            <span class="comment"># 判断玩家生命</span></span><br><span class="line">            <span class="keyword">if</span> p.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.who(en.name)</span><br><span class="line">                Aside.over()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 玩家开始攻击</span></span><br><span class="line">            en.life = en.life - p.attack</span><br><span class="line">            <span class="comment"># 判断怪物的生命</span></span><br><span class="line">            <span class="keyword">if</span> en.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.single(en.name)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 和Boss战斗</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">boss</span>(<span class="params">p, en, Aside, flag2</span>):</span><br><span class="line">        <span class="comment"># 互相攻击</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 判断先手</span></span><br><span class="line">            <span class="keyword">if</span> flag2 == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 玩家攻击</span></span><br><span class="line">                en.life = en.life + en.defence - p.attack</span><br><span class="line">                <span class="comment"># 取消先手</span></span><br><span class="line">                flag2 = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 判断怪物生命</span></span><br><span class="line">                <span class="keyword">if</span> en.life &lt;= <span class="number">0</span>:</span><br><span class="line">                    Aside.win()</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment"># 正常手（没有buff，我就是先手，有buff，我就是后手）</span></span><br><span class="line">            p.life = p.life - (en.attack - p.defence)</span><br><span class="line">            <span class="comment"># 判断玩家生命</span></span><br><span class="line">            <span class="keyword">if</span> p.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.who(en.name)</span><br><span class="line">                Aside.over()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 玩家攻击</span></span><br><span class="line">            en.life = en.life + en.defence - p.attack</span><br><span class="line">            <span class="comment"># 判断怪物生命</span></span><br><span class="line">            <span class="keyword">if</span> en.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.win()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>主程序调用的时候，直接传入必要的参数即可：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建熔岩怪</span></span><br><span class="line">en2 = Enemy(<span class="string">&quot;熔岩怪&quot;</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 遇到第二个怪，熔岩怪</span></span><br><span class="line">Aside.fight(en2.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">if</span> Fight.general(p, en2, Aside, p.defence) == <span class="literal">False</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Boss</span></span><br><span class="line">en3 = Enemy(<span class="string">&quot;恶魔&quot;</span>, <span class="number">5000</span>, <span class="number">10000</span>, <span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">if</span> Fight.boss(p, en3, Aside, flag2) == <span class="literal">False</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h1 id="69-实训-塞尔达传说⑨"><a href="#69-实训-塞尔达传说⑨" class="headerlink" title="69. 实训.塞尔达传说⑨"></a>69. 实训.塞尔达传说⑨</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-场景类"><a href="#1-场景类" class="headerlink" title="1. 场景类"></a>1. 场景类</h3><blockquote><p>目前四个场景都在主程序中，分成独立类，方便以后扩展升级</p></blockquote><ul><li>在main.py中，执行主函数，已经只是调用关系，根据场景一一调用，非常清晰</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入类库</span></span><br><span class="line"><span class="keyword">from</span> Aside2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Original2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Cold2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Fire2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Castle2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 开场语音</span></span><br><span class="line">    p = Aside.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景一</span></span><br><span class="line">    o = Original()</span><br><span class="line">    o.<span class="built_in">exec</span>(p, Aside)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行场景二</span></span><br><span class="line">    c = Cold()</span><br><span class="line">    c.<span class="built_in">exec</span>(p, Aside)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景三</span></span><br><span class="line">    f = Fire()</span><br><span class="line">    f.<span class="built_in">exec</span>(p, Aside)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景四</span></span><br><span class="line">    cc = Castle()</span><br><span class="line">    cc.<span class="built_in">exec</span>(p, Aside)</span><br></pre></td></tr></table></figure><ul><li>创建世界的抽象父类，在基础知识部分学习过，其它四个场景，则继承它</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">from</span> Enemy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Fight2 <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法，执行场景</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exec</span>():<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>子类的构建如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> World2 <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 初始场景（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Original</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exec</span>(<span class="params">self, p, Aside</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n走出洞穴，遇到一个老爷爷，他要送你两个烤苹果！&quot;</span>)</span><br><span class="line">        flag = <span class="built_in">int</span>(Aside.<span class="built_in">input</span>(<span class="string">&quot;烤苹果&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            p.life += <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你的生命值+2&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 统计目前状态</span></span><br><span class="line">        Aside.status(p.life, p.defence, p.attack)</span><br></pre></td></tr></table></figure><ul><li>其余的三个子类，一模一样，不再贴代码。</li><li>这么做的好处显而易见，扩展场景，只需要在这个类中设计即可</li></ul><h1 id="70-实训-塞尔达传说⑩"><a href="#70-实训-塞尔达传说⑩" class="headerlink" title="70. 实训.塞尔达传说⑩"></a>70. 实训.塞尔达传说⑩</h1><div style="text-align:right;color:#666;font-size:20px;">主讲老师 - 李炎恢</div><h3 id="1-启动主程序"><a href="#1-启动主程序" class="headerlink" title="1. 启动主程序"></a>1. 启动主程序</h3><blockquote><p>观察目前结构，调整重复代码，并实现场景的多态调用，实现总裁式一行启动模式</p></blockquote><ul><li>在World类中，增加一个统计数据的方法，来避免每个子类重复操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stats</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="comment"># 统计目前状态</span></span><br><span class="line">    Aside.status(p.life, p.defence, p.attack)</span><br></pre></td></tr></table></figure><ul><li>子类调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">super</span>().stats(p)</span><br></pre></td></tr></table></figure><ul><li><p>Aside类，直接通过World引入，避免前台传递Aside类</p></li><li><p>在World类中，创建一个静态方法，实现多态的调用效果</p></li><li>由于return 被封装到子类的方法里了，无法实现退出函数，需要再传递回来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">obj, p</span>):</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="built_in">exec</span>(p)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 开场语音</span></span><br><span class="line">    p = Aside.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景一（初始区）</span></span><br><span class="line">    World.run(Original(), p)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行场景二（寒冰区）</span></span><br><span class="line">    <span class="keyword">if</span> World.run(Cold(), p) == <span class="literal">False</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景三（火山区）</span></span><br><span class="line">    <span class="keyword">if</span> World.run(Fire(), p) == <span class="literal">False</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景四（城堡区）</span></span><br><span class="line">    <span class="keyword">if</span> World.run(Castle(), p) == <span class="literal">False</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">if</span> Fight.general(p, en1, Aside, p.defence_cold) == <span class="literal">False</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>实现主程序一行调用，可以将总调用程序复制给game.py。然后用mian执行game即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入game</span></span><br><span class="line"><span class="keyword">import</span> game2 <span class="keyword">as</span> g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 塞尔达，启动</span></span><br><span class="line">g.main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;02-Python导言须知-软件使用&quot;&gt;&lt;a href=&quot;#02-Python导言须知-软件使用&quot; class=&quot;headerlink&quot; title=&quot;02. Python导言须知.软件使用&quot;&gt;&lt;/a&gt;02. Python导言须知.软件使用&lt;/h1&gt;&lt;div st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java从入门到起飞</title>
    <link href="http://example.com/posts/916f4904.html"/>
    <id>http://example.com/posts/916f4904.html</id>
    <published>2024-05-19T10:40:18.000Z</published>
    <updated>2024-05-19T11:28:53.852Z</updated>
    
    <content type="html"><![CDATA[<p>1，把maven搞懂，以及pom文件。还有idea的maven设置，maven自己的setting文件。maven是新手的一个大坑，很多人拉了代码，跑不起来，就是maven基础太差，只会引个jar包。pom文件,还有idea的maven设置，maven自己的setting文件,就这3个东西,主要13,2也就1分钟的事。<br>maven 3板斧 1，有的文件下载了一半，就不下载了，所以去本地仓库删掉，再执行package即可。2，package过了以后，点idea的两个maven更新按钮。3，关闭idea再打开。可以解决95%的maven疑难杂症。</p><p>2，搞好idea的设置，包括颜色，快捷键，插件，快捷键代码和自定义快捷键代码。以及git，jdk版本，项目结构和各种插件的配置</p><p>3，学会破解idea，或者起码不会被卡住用不了idea</p><p>4，学会使用datagrip，可以设置字体颜色和改快捷键，破解方法和idea一致。navicat几年没用了，但是想来很难比datagrip更优异</p><p>5，学会使用apifox，这个要不了多久，最快甚至十分钟就能学会.Postman几年没用了不知道，但是比swagger强太多了</p><p>6，学会使用git的版本控制，基本的一些命令不说了。主要彻底搞明白branch切换，pull代码，commit本地,push代码，merge代码和rollback代码。还有本地修改的代码，但不想提交到远程的move to another changelist（具体忘了，好像是这个）</p><p>7，学会下载和配置mysql，redis，jdk，甚至vue的环境。jdk可以多下几个版本，8，11和最新，虽然国内大部分项目都是8，但是偶尔年轻项目也可能有11，至于更高版本的，有时候你在github上面拉开源项目，学习的时候可能会用到</p><p>8，搞懂一个基本的springboot框架，那些必须的注解和常用注解，Springcloud可以不学，会个Openfeign基本上和会springcloud差不多，反正框架又不要你搭，最多学一下nacos，也简单的一比</p><p>10，学会使用代码生成器，mybatisX</p><p>11，学会处理date，Localdatetime，enum，json，controller的result对象，理解自动插入插入时间更新时间，逻辑删除及配置，Page对象。具体展开太多太杂了,工作中多看代码别人是怎么处理的,自己慢慢思考体悟。一般这些代码都是项目或者模块通用的吧，只写一次，写一次两三个月不用写，这种代码我都是写好后保存到云，用的时候直接CV下来。差不多，一般都有自己的util类，但新手第一次要去理解一下这些东西的作用和意义的</p><p>12，学会使用easyexcel，做简单的导入导出（这里Lz推荐一个myexcel，我觉得更好用代码更优雅）。<br>复杂导入导出的话，遇到了再慢慢啃吧</p><p>13，学习使用spring data jpa，单表静态查询和二三表简单静态联查，它比mybatis舒服很多，因为他不需要写xml，可以自动生成很多单表代码，可以自动帮我们数据库建表（对，和mybatis的生成代码是反着来的，他是先定义实体类，然后运行项目数据库就会自动建表）最重要的是jpa是可以和mybatis共存的，只需要引个jar包，在实体类加几个注解，用JPA的生成器一键批量生成一下dao，另外，JPA也可以写sql，他有原生sql和hql两种模式，推荐hql，它是面向对象型的，基本看一眼就会爱上，像楼主当年一遇idea就抛弃了eclipse一样。楼主现在就是，所有简单sql用jpa，分页以及动态查询用mybatis plus，复杂SQL让chatgpt给我写xml，反正我是基本啥事都不干。 对了，jpa只要会它的基本操作就行，千万别认为他优雅高大上，去上头搞什么级联分页querydsl，这些鬼东西学习成本太高，以后有余力了再学，反正楼主是觉得搭配my和mp更实惠。只要不是严肃的大项目，爱咋玩咋玩，jpa哪怕第一次见，就算不会写，但至少看得懂是什么意思，hql也完全可以改，维护起来比mybatis轻松多了</p><p>最后，自己做一个简单的增删改查项目。自己给自己去想象需求，自己写提纲，去思考总结自己要写哪些接口，每个接口要输入输出什么<br>， 然后从数据库开始建表建字段，尽量把自己学过的知识点都用上，根据模块或流程，把自己提纲上的接口都一一实现，最后再用apifox去一一验证自己的接口。这步最重要,新手入职后短期被开基本死在这一步,拿个原型图一脸懵逼在哪里不晓得该怎么开始,然后巨大的压力扑面而来,心态稳不住就崩了.看视频的时候人家都设计好了接口,不会动脑子去深想。</p><p>15，了解下一些常用的工具包，比如date，string,file,object,collection的utils， 还有josnobject，optional，Lists等工具类</p><p>16，会用steam的基本操作，filter,map,foreach，tolist，tomap等</p><p>17，beanutils.copyproperties，可以自己封装一下给返回值，让代码量更少更优雅</p><p>18，lombok基本注解，链式调用注解accssors，去autowired注解Required argsconstructor，Log注解s1f4j。</p><p>架构需要对网络非常熟悉，网关，公网内网，各式各样的通讯协议，流量，性能。还有就是技术选型，什么样的业务场景用什么样的技术，不同的技术的优劣点在哪，还要会核算成本。比如说数据库，有关系型的，文档型的，内存型的，olap的，时序的……各种各样的东西很多的。做开源更是，你得知道什么样的东西有价值，哪些方面是开源领域目前欠缺的，才能做出高质量的开源项目。</p><p>19.学会从网页,按f12去查接口地址,入参和响应。这个其实就是要对http协议的基本结构熟悉，最起码得知道请求参数形式有哪几种，返回格式有啥样的，对应的content-type是啥，然后前端怎么写对应的是哪个content-type，后端怎么写对应的是哪个content-type</p><p>20.学会idea的debug,断点放行和跳到下一个断点,以及打断点不需要重启idea,再调一次接口就行。处理bug的主要方法就是上面19,20两个结合起来,再搭配百度和chatgpt查报错message</p><p>21.遵守3层架构的规范,代码要有边界感,controller层不写业务不调dao,service层给controller的返回值不要封装成ResultBean</p><p>22.参数校验可以学下spring的@valid,偶尔一两个也可以直接判if.具体看别人老员工的模块代码,不要乱校验什么都验,什么都验不如什么都不验</p><p>23.学会处理异常,定义异常和log的message,在关键的你觉得可能出错的地方抛异常或打log,具体同上看老员工的代码是怎么写的,也是宁缺毋滥</p><p>24.不要硬编码,除了阿拉伯数字和log异常的message</p><p>25.常量可以写接口里,更好看,接口默认public static final</p><p>26.封装copybean,可以少些1-2行代码</p><p>27.自己封装了一个lambda方式调用的if,但是不能return结束方法,只能throw<br> 这你还不如封装stream的filter呢<br> 不太理解<br> 工具方法返回一个Predicate表达式，里面写一些常用的判断逻辑，这样就可以用在stream流里了。</p><p> 28.service层统一注入所有dao和service,这样就不需要某些service类注入一大堆别的dao和service的bean了</p><p> 26 27 28这3条,我觉得你们可以当做自己的原创去面试</p><p> 29.项目有token校验的话,本地自测可以屏蔽掉,然后提交到another分支,这样不会push到远程,本地也不用管token了</p><p> 30.自定义快捷代码,$s$代表光标最后出现的位置,s可以是任何值,在这里你可以找到main sout什么的</p><p> 31.idea插件推荐<br>1.apifox helper 见名知意<br>2.codeglance pro 代码缩略图滚动条<br>3.ECTranslation2 见名知意<br>4.mybatisX mybatis生成器<br>5.JPA Support jpa生成器<br>6.rainbow brackets 彩虹括号,各种括号嵌套的时候可以设置不同的颜色<br>7.grep console 分类设置控制台输出信息的颜色<br>8.cosy 智能代码补全<br>再推荐个GsonFormatPlus 适合对接接口根据报文直接生成实体<br>我试试,这样以后除了业务service代码,什么都不要自己写了</p><p>32.工具推荐<br>1.snipaste 可以让截图一直显示在表层,不会点击别的窗口就被覆盖,用用就知道,神器<br>2.listary 电脑全局搜索软件,免费,快<br>3.bandizip 解压缩神器,具体方便在哪可以看看设置<br>4.finalshell 远程连接神器,免费,比winscp好用<br>5.todesk 远程控制神器,免费好用<br>6.notepad 程序员专用文件查看器<br>notepad没有EditPlus好用，一大堆注册码 用了永久免费，如果你是mac电脑的话, 就用sublime Text 看着太爽了, 语法高亮贼舒服<br>都有idea了为啥不试试用idea自带的ssh工具<br>这个还真不知道,final shell多窗口和文件传输快太舒服了,潜意识里认为不会有更好的免费ssh软件了<br>主要是这玩意如果测试环境服务器能自己传包打版的话，配好目录映射，打完包生成jar包右键里选择上传就能直接把包打上去。下面控制台开一个远程ssh也比较方便</p><p>33.代码尽量解耦<br>方法模块化,1个方法尽量只做一件独立的事情(3行代码以下就算了),最后在返回给controller的方法里组装起来,这样代码逻辑看起来非常清晰,修改迭代起来也简单.解耦的好,方法名取好,注释都能少写一大半</p><p>其次就是大家技术的普遍提高,以及代码生成器,mybatisplus等各种框架,大大的提高了老司机的开发效率,不夸张的说,lz现在的开发速度,是5年前的自己的3倍以上,别人估计也差不了多少,而新手对于老司机来说完全无法分担什么任务,还得花时间带影响自己的效率</p><p>lz，刚入行拿到项目不知道具体业务怎么写，不知道该写什么，该学习那方面？<br>拿到原型图,冥想,思考前端每一个按钮应该输入什么然后应该得到什么数据,然后设计表,每个接口写提纲,代码生成器生成基本代码,最后一个一个接口写下去</p><p>34.实际项目中理论上该用enum的字段很多时候可以用数字代替,注释写好就行.enum未必能提升多少可读性和可靠性,但一定能降低开发效率和体验(光想那些type该用什么单词就得纠结好久)<br>tips:mysql的tinyint(1)映射boolean类型,mysql的enum类型不支持int映射</p><p>35.学会使用泛型,不是简单的List<String>,而是能读懂适应诸如参数列表包含T ? extends super的方法,自己写公共方法时也能把T Class作为参数列表来写</p><p>36.serviceImpl中的方法,非service接口定义的一律用private修饰,会被别的类调用的写util包用public static修饰.<br>其实97%以上的service接口都是没必要的,只需要把实现类当service就行,但毕竟大家都习惯并固化下来了,就随大流吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1，把maven搞懂，以及pom文件。还有idea的maven设置，maven自己的setting文件。maven是新手的一个大坑，很多人拉了代码，跑不起来，就是maven基础太差，只会引个jar包。pom文件,还有idea的maven设置，maven自己的setting文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>英语四六级</title>
    <link href="http://example.com/posts/47a889e1.html"/>
    <id>http://example.com/posts/47a889e1.html</id>
    <published>2024-05-17T12:47:26.000Z</published>
    <updated>2024-05-17T12:49:37.663Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhenti.burningvocabulary.com/cet4">英语四六级真题网站</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zhenti.burningvocabulary.com/cet4&quot;&gt;英语四六级真题网站&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>白色相簿2随笔</title>
    <link href="http://example.com/posts/af144179.html"/>
    <id>http://example.com/posts/af144179.html</id>
    <published>2024-05-16T14:32:50.000Z</published>
    <updated>2024-05-17T12:47:04.510Z</updated>
    
    <content type="html"><![CDATA[<p>我大概，一辈子，都不会忘记这部作品了吧。从ic篇，cc篇，到coda篇，丸户老贼的刀法贯穿始终，他到底是怎么做到任何一条线都会胃疼，都会出现意难平。<br><img src="https://img2.imgtp.com/2024/05/17/uFrrK4oW.jpg" alt="合照"><br>个人评价:雪菜te&gt;冬马te&gt;千晶te&gt;麻理线&gt;浮气线&gt;小春线<br>个人而言最喜欢冬马，我有宗教信仰，非黑长直不可，但是雪菜te是所有人都能获得幸福的理想结局，正常人第一次进的应该都是这个结局。冬马te太痛了，男主抛弃在日本的一切，义无反顾奔向爱情的一幕令我很感动，但是放在现实中太残酷了。浮气线，男主精虫上脑，想要脚踏两条船，鼠鼠对此深恶痛绝，但不得不承认正是男主的优柔寡断才有了序章的各种名场面。<br><img src="https://img2.imgtp.com/2024/05/17/8rAHdRIC.jpg" alt="冬马绝美婚纱图"><br><img src="https://img2.imgtp.com/2024/05/17/TYKJbpYP.jpg" alt="冬马绝美图"><br><img src="https://img2.imgtp.com/2024/05/17/HLg7wUjL.jpg" alt="雪菜美图"><br><img src="https://img2.imgtp.com/2024/05/17/zwhs5TCM.jpg" alt="雪菜美图"><br>第一个帖子以白色相簿2开头，之后会陆续上传贴吧大佬的解读。<br><a href="https://www.bilibili.com/video/BV1EN4y147yZ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=12fdc9884759acf6187aa1dc18935832">入坑指南,点它</a><br>另外，左下角的音乐是白色相簿2ost，<strong>望周知</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我大概，一辈子，都不会忘记这部作品了吧。从ic篇，cc篇，到coda篇，丸户老贼的刀法贯穿始终，他到底是怎么做到任何一条线都会胃疼，都会出现意难平。&lt;br&gt;&lt;img src=&quot;https://img2.imgtp.com/2024/05/17/uFrrK4oW.jpg&quot; a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-05-16T14:28:01.314Z</published>
    <updated>2024-05-16T14:28:19.600Z</updated>
    
    <content type="html"><![CDATA[<p>sadf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;sadf&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
